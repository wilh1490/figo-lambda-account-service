{"version":3,"sources":["../../src/index.ts"],"sourcesContent":["export interface HelixDBClient {\n  url: string;\n  /**\n   * Query the HelixDB API\n   * @param endpoint - The endpoint to query\n   * @param data - The data to send to the endpoint\n   * @returns The response from the endpoint\n   */\n  query: (endpoint: string, data: HelixDBInput) => Promise<HelixDBResponse>;\n}\n\nexport type HelixDBResponse = Record<string, any>;\nexport type HelixDBInput = Record<string, any>;\n\nclass HelixDB implements HelixDBClient {\n  url: string;\n\n  /**\n   * Create a new HelixDB client\n   * @param url - The url of the HelixDB server\n   *\n   * (default: `http://localhost:6969`)\n   */\n  constructor(url: string = \"http://localhost:6969\") {\n    this.url = url;\n  }\n\n  async query(endpoint: string, data: HelixDBInput): Promise<HelixDBResponse> {\n    const response = await fetch(`${this.url}/${endpoint}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n    return response.json();\n  }\n}\n\nexport default HelixDB;\n"],"mappings":";AAcA,IAAM,UAAN,MAAuC;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,YAAY,MAAc,yBAAyB;AACjD,SAAK,MAAM;AAAA,EACb;AAAA,EAEA,MAAM,MAAM,UAAkB,MAA8C;AAC1E,UAAM,WAAW,MAAM,MAAM,GAAG,KAAK,GAAG,IAAI,QAAQ,IAAI;AAAA,MACtD,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,MAClB;AAAA,MACA,MAAM,KAAK,UAAU,IAAI;AAAA,IAC3B,CAAC;AACD,WAAO,SAAS,KAAK;AAAA,EACvB;AACF;AAEA,IAAO,gBAAQ;","names":[]}