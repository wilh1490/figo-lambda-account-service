import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { DocumentType as __DocumentType } from "@smithy/types";
import { BedrockAgentServiceException as __BaseException } from "./BedrockAgentServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare const CustomControlMethod: {
  readonly RETURN_CONTROL: "RETURN_CONTROL";
};
export type CustomControlMethod =
  (typeof CustomControlMethod)[keyof typeof CustomControlMethod];
export type ActionGroupExecutor =
  | ActionGroupExecutor.CustomControlMember
  | ActionGroupExecutor.LambdaMember
  | ActionGroupExecutor.$UnknownMember;
export declare namespace ActionGroupExecutor {
  interface LambdaMember {
    lambda: string;
    customControl?: never;
    $unknown?: never;
  }
  interface CustomControlMember {
    lambda?: never;
    customControl: CustomControlMethod;
    $unknown?: never;
  }
  interface $UnknownMember {
    lambda?: never;
    customControl?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    lambda: (value: string) => T;
    customControl: (value: CustomControlMethod) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: ActionGroupExecutor, visitor: Visitor<T>) => T;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare const ActionGroupState: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type ActionGroupState =
  (typeof ActionGroupState)[keyof typeof ActionGroupState];
export interface S3Identifier {
  s3BucketName?: string | undefined;
  s3ObjectKey?: string | undefined;
}
export type APISchema =
  | APISchema.PayloadMember
  | APISchema.S3Member
  | APISchema.$UnknownMember;
export declare namespace APISchema {
  interface S3Member {
    s3: S3Identifier;
    payload?: never;
    $unknown?: never;
  }
  interface PayloadMember {
    s3?: never;
    payload: string;
    $unknown?: never;
  }
  interface $UnknownMember {
    s3?: never;
    payload?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    s3: (value: S3Identifier) => T;
    payload: (value: string) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: APISchema, visitor: Visitor<T>) => T;
}
export declare const Type: {
  readonly ARRAY: "array";
  readonly BOOLEAN: "boolean";
  readonly INTEGER: "integer";
  readonly NUMBER: "number";
  readonly STRING: "string";
};
export type Type = (typeof Type)[keyof typeof Type];
export interface ParameterDetail {
  description?: string | undefined;
  type: Type | undefined;
  required?: boolean | undefined;
}
export declare const RequireConfirmation: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type RequireConfirmation =
  (typeof RequireConfirmation)[keyof typeof RequireConfirmation];
export interface Function {
  name: string | undefined;
  description?: string | undefined;
  parameters?: Record<string, ParameterDetail> | undefined;
  requireConfirmation?: RequireConfirmation | undefined;
}
export type FunctionSchema =
  | FunctionSchema.FunctionsMember
  | FunctionSchema.$UnknownMember;
export declare namespace FunctionSchema {
  interface FunctionsMember {
    functions: Function[];
    $unknown?: never;
  }
  interface $UnknownMember {
    functions?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    functions: (value: Function[]) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: FunctionSchema, visitor: Visitor<T>) => T;
}
export declare const ActionGroupSignature: {
  readonly AMAZON_CODEINTERPRETER: "AMAZON.CodeInterpreter";
  readonly AMAZON_USERINPUT: "AMAZON.UserInput";
  readonly ANTHROPIC_BASH: "ANTHROPIC.Bash";
  readonly ANTHROPIC_COMPUTER: "ANTHROPIC.Computer";
  readonly ANTHROPIC_TEXTEDITOR: "ANTHROPIC.TextEditor";
};
export type ActionGroupSignature =
  (typeof ActionGroupSignature)[keyof typeof ActionGroupSignature];
export interface CreateAgentActionGroupRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  actionGroupName: string | undefined;
  clientToken?: string | undefined;
  description?: string | undefined;
  parentActionGroupSignature?: ActionGroupSignature | undefined;
  parentActionGroupSignatureParams?: Record<string, string> | undefined;
  actionGroupExecutor?: ActionGroupExecutor | undefined;
  apiSchema?: APISchema | undefined;
  actionGroupState?: ActionGroupState | undefined;
  functionSchema?: FunctionSchema | undefined;
}
export interface AgentActionGroup {
  agentId: string | undefined;
  agentVersion: string | undefined;
  actionGroupId: string | undefined;
  actionGroupName: string | undefined;
  clientToken?: string | undefined;
  description?: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  parentActionSignature?: ActionGroupSignature | undefined;
  parentActionGroupSignatureParams?: Record<string, string> | undefined;
  actionGroupExecutor?: ActionGroupExecutor | undefined;
  apiSchema?: APISchema | undefined;
  functionSchema?: FunctionSchema | undefined;
  actionGroupState: ActionGroupState | undefined;
}
export interface CreateAgentActionGroupResponse {
  agentActionGroup: AgentActionGroup | undefined;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export interface ValidationExceptionField {
  name: string | undefined;
  message: string | undefined;
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  fieldList?: ValidationExceptionField[] | undefined;
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface DeleteAgentActionGroupRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  actionGroupId: string | undefined;
  skipResourceInUseCheck?: boolean | undefined;
}
export interface DeleteAgentActionGroupResponse {}
export interface GetAgentActionGroupRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  actionGroupId: string | undefined;
}
export interface GetAgentActionGroupResponse {
  agentActionGroup: AgentActionGroup | undefined;
}
export interface ListAgentActionGroupsRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  maxResults?: number | undefined;
  nextToken?: string | undefined;
}
export interface ActionGroupSummary {
  actionGroupId: string | undefined;
  actionGroupName: string | undefined;
  actionGroupState: ActionGroupState | undefined;
  description?: string | undefined;
  updatedAt: Date | undefined;
}
export interface ListAgentActionGroupsResponse {
  actionGroupSummaries: ActionGroupSummary[] | undefined;
  nextToken?: string | undefined;
}
export interface UpdateAgentActionGroupRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  actionGroupId: string | undefined;
  actionGroupName: string | undefined;
  description?: string | undefined;
  parentActionGroupSignature?: ActionGroupSignature | undefined;
  parentActionGroupSignatureParams?: Record<string, string> | undefined;
  actionGroupExecutor?: ActionGroupExecutor | undefined;
  actionGroupState?: ActionGroupState | undefined;
  apiSchema?: APISchema | undefined;
  functionSchema?: FunctionSchema | undefined;
}
export interface UpdateAgentActionGroupResponse {
  agentActionGroup: AgentActionGroup | undefined;
}
export declare const AgentCollaboration: {
  readonly DISABLED: "DISABLED";
  readonly SUPERVISOR: "SUPERVISOR";
  readonly SUPERVISOR_ROUTER: "SUPERVISOR_ROUTER";
};
export type AgentCollaboration =
  (typeof AgentCollaboration)[keyof typeof AgentCollaboration];
export declare const AgentStatus: {
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly NOT_PREPARED: "NOT_PREPARED";
  readonly PREPARED: "PREPARED";
  readonly PREPARING: "PREPARING";
  readonly UPDATING: "UPDATING";
  readonly VERSIONING: "VERSIONING";
};
export type AgentStatus = (typeof AgentStatus)[keyof typeof AgentStatus];
export type OrchestrationExecutor =
  | OrchestrationExecutor.LambdaMember
  | OrchestrationExecutor.$UnknownMember;
export declare namespace OrchestrationExecutor {
  interface LambdaMember {
    lambda: string;
    $unknown?: never;
  }
  interface $UnknownMember {
    lambda?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    lambda: (value: string) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: OrchestrationExecutor, visitor: Visitor<T>) => T;
}
export interface CustomOrchestration {
  executor?: OrchestrationExecutor | undefined;
}
export interface GuardrailConfiguration {
  guardrailIdentifier?: string | undefined;
  guardrailVersion?: string | undefined;
}
export declare const MemoryType: {
  readonly SESSION_SUMMARY: "SESSION_SUMMARY";
};
export type MemoryType = (typeof MemoryType)[keyof typeof MemoryType];
export interface SessionSummaryConfiguration {
  maxRecentSessions?: number | undefined;
}
export interface MemoryConfiguration {
  enabledMemoryTypes: MemoryType[] | undefined;
  storageDays?: number | undefined;
  sessionSummaryConfiguration?: SessionSummaryConfiguration | undefined;
}
export declare const OrchestrationType: {
  readonly CUSTOM_ORCHESTRATION: "CUSTOM_ORCHESTRATION";
  readonly DEFAULT: "DEFAULT";
};
export type OrchestrationType =
  (typeof OrchestrationType)[keyof typeof OrchestrationType];
export interface InferenceConfiguration {
  temperature?: number | undefined;
  topP?: number | undefined;
  topK?: number | undefined;
  maximumLength?: number | undefined;
  stopSequences?: string[] | undefined;
}
export declare const CreationMode: {
  readonly DEFAULT: "DEFAULT";
  readonly OVERRIDDEN: "OVERRIDDEN";
};
export type CreationMode = (typeof CreationMode)[keyof typeof CreationMode];
export declare const PromptState: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type PromptState = (typeof PromptState)[keyof typeof PromptState];
export declare const PromptType: {
  readonly KNOWLEDGE_BASE_RESPONSE_GENERATION: "KNOWLEDGE_BASE_RESPONSE_GENERATION";
  readonly MEMORY_SUMMARIZATION: "MEMORY_SUMMARIZATION";
  readonly ORCHESTRATION: "ORCHESTRATION";
  readonly POST_PROCESSING: "POST_PROCESSING";
  readonly PRE_PROCESSING: "PRE_PROCESSING";
};
export type PromptType = (typeof PromptType)[keyof typeof PromptType];
export interface PromptConfiguration {
  promptType?: PromptType | undefined;
  promptCreationMode?: CreationMode | undefined;
  promptState?: PromptState | undefined;
  basePromptTemplate?: string | undefined;
  inferenceConfiguration?: InferenceConfiguration | undefined;
  parserMode?: CreationMode | undefined;
  foundationModel?: string | undefined;
  additionalModelRequestFields?: __DocumentType | undefined;
}
export interface PromptOverrideConfiguration {
  promptConfigurations: PromptConfiguration[] | undefined;
  overrideLambda?: string | undefined;
}
export interface Agent {
  agentId: string | undefined;
  agentName: string | undefined;
  agentArn: string | undefined;
  agentVersion: string | undefined;
  clientToken?: string | undefined;
  instruction?: string | undefined;
  agentStatus: AgentStatus | undefined;
  foundationModel?: string | undefined;
  description?: string | undefined;
  orchestrationType?: OrchestrationType | undefined;
  customOrchestration?: CustomOrchestration | undefined;
  idleSessionTTLInSeconds: number | undefined;
  agentResourceRoleArn: string | undefined;
  customerEncryptionKeyArn?: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  preparedAt?: Date | undefined;
  failureReasons?: string[] | undefined;
  recommendedActions?: string[] | undefined;
  promptOverrideConfiguration?: PromptOverrideConfiguration | undefined;
  guardrailConfiguration?: GuardrailConfiguration | undefined;
  memoryConfiguration?: MemoryConfiguration | undefined;
  agentCollaboration?: AgentCollaboration | undefined;
}
export interface AgentAliasRoutingConfigurationListItem {
  agentVersion?: string | undefined;
  provisionedThroughput?: string | undefined;
}
export interface AgentAliasHistoryEvent {
  routingConfiguration?: AgentAliasRoutingConfigurationListItem[] | undefined;
  endDate?: Date | undefined;
  startDate?: Date | undefined;
}
export declare const AgentAliasStatus: {
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly DISSOCIATED: "DISSOCIATED";
  readonly FAILED: "FAILED";
  readonly PREPARED: "PREPARED";
  readonly UPDATING: "UPDATING";
};
export type AgentAliasStatus =
  (typeof AgentAliasStatus)[keyof typeof AgentAliasStatus];
export declare const AliasInvocationState: {
  readonly ACCEPT_INVOCATIONS: "ACCEPT_INVOCATIONS";
  readonly REJECT_INVOCATIONS: "REJECT_INVOCATIONS";
};
export type AliasInvocationState =
  (typeof AliasInvocationState)[keyof typeof AliasInvocationState];
export interface AgentAlias {
  agentId: string | undefined;
  agentAliasId: string | undefined;
  agentAliasName: string | undefined;
  agentAliasArn: string | undefined;
  clientToken?: string | undefined;
  description?: string | undefined;
  routingConfiguration: AgentAliasRoutingConfigurationListItem[] | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  agentAliasHistoryEvents?: AgentAliasHistoryEvent[] | undefined;
  agentAliasStatus: AgentAliasStatus | undefined;
  failureReasons?: string[] | undefined;
  aliasInvocationState?: AliasInvocationState | undefined;
}
export interface AgentAliasSummary {
  agentAliasId: string | undefined;
  agentAliasName: string | undefined;
  description?: string | undefined;
  routingConfiguration?: AgentAliasRoutingConfigurationListItem[] | undefined;
  agentAliasStatus: AgentAliasStatus | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  aliasInvocationState?: AliasInvocationState | undefined;
}
export interface AgentDescriptor {
  aliasArn?: string | undefined;
}
export declare const RelayConversationHistory: {
  readonly DISABLED: "DISABLED";
  readonly TO_COLLABORATOR: "TO_COLLABORATOR";
};
export type RelayConversationHistory =
  (typeof RelayConversationHistory)[keyof typeof RelayConversationHistory];
export interface AgentCollaborator {
  agentId: string | undefined;
  agentVersion: string | undefined;
  agentDescriptor: AgentDescriptor | undefined;
  collaboratorId: string | undefined;
  collaborationInstruction: string | undefined;
  collaboratorName: string | undefined;
  createdAt: Date | undefined;
  lastUpdatedAt: Date | undefined;
  relayConversationHistory?: RelayConversationHistory | undefined;
  clientToken?: string | undefined;
}
export interface AssociateAgentCollaboratorRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  agentDescriptor: AgentDescriptor | undefined;
  collaboratorName: string | undefined;
  collaborationInstruction: string | undefined;
  relayConversationHistory?: RelayConversationHistory | undefined;
  clientToken?: string | undefined;
}
export interface AssociateAgentCollaboratorResponse {
  agentCollaborator: AgentCollaborator | undefined;
}
export interface DisassociateAgentCollaboratorRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  collaboratorId: string | undefined;
}
export interface DisassociateAgentCollaboratorResponse {}
export interface GetAgentCollaboratorRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  collaboratorId: string | undefined;
}
export interface GetAgentCollaboratorResponse {
  agentCollaborator: AgentCollaborator | undefined;
}
export interface ListAgentCollaboratorsRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  maxResults?: number | undefined;
  nextToken?: string | undefined;
}
export interface AgentCollaboratorSummary {
  agentId: string | undefined;
  agentVersion: string | undefined;
  collaboratorId: string | undefined;
  agentDescriptor: AgentDescriptor | undefined;
  collaborationInstruction: string | undefined;
  relayConversationHistory: RelayConversationHistory | undefined;
  collaboratorName: string | undefined;
  createdAt: Date | undefined;
  lastUpdatedAt: Date | undefined;
}
export interface ListAgentCollaboratorsResponse {
  agentCollaboratorSummaries: AgentCollaboratorSummary[] | undefined;
  nextToken?: string | undefined;
}
export interface UpdateAgentCollaboratorRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  collaboratorId: string | undefined;
  agentDescriptor: AgentDescriptor | undefined;
  collaboratorName: string | undefined;
  collaborationInstruction: string | undefined;
  relayConversationHistory?: RelayConversationHistory | undefined;
}
export interface UpdateAgentCollaboratorResponse {
  agentCollaborator: AgentCollaborator | undefined;
}
export interface AgentFlowNodeConfiguration {
  agentAliasArn: string | undefined;
}
export declare const KnowledgeBaseState: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type KnowledgeBaseState =
  (typeof KnowledgeBaseState)[keyof typeof KnowledgeBaseState];
export interface AgentKnowledgeBase {
  agentId: string | undefined;
  agentVersion: string | undefined;
  knowledgeBaseId: string | undefined;
  description: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  knowledgeBaseState: KnowledgeBaseState | undefined;
}
export interface AgentKnowledgeBaseSummary {
  knowledgeBaseId: string | undefined;
  description?: string | undefined;
  knowledgeBaseState: KnowledgeBaseState | undefined;
  updatedAt: Date | undefined;
}
export interface CreateAgentRequest {
  agentName: string | undefined;
  clientToken?: string | undefined;
  instruction?: string | undefined;
  foundationModel?: string | undefined;
  description?: string | undefined;
  orchestrationType?: OrchestrationType | undefined;
  customOrchestration?: CustomOrchestration | undefined;
  idleSessionTTLInSeconds?: number | undefined;
  agentResourceRoleArn?: string | undefined;
  customerEncryptionKeyArn?: string | undefined;
  tags?: Record<string, string> | undefined;
  promptOverrideConfiguration?: PromptOverrideConfiguration | undefined;
  guardrailConfiguration?: GuardrailConfiguration | undefined;
  memoryConfiguration?: MemoryConfiguration | undefined;
  agentCollaboration?: AgentCollaboration | undefined;
}
export interface CreateAgentResponse {
  agent: Agent | undefined;
}
export interface DeleteAgentRequest {
  agentId: string | undefined;
  skipResourceInUseCheck?: boolean | undefined;
}
export interface DeleteAgentResponse {
  agentId: string | undefined;
  agentStatus: AgentStatus | undefined;
}
export interface GetAgentRequest {
  agentId: string | undefined;
}
export interface GetAgentResponse {
  agent: Agent | undefined;
}
export interface ListAgentsRequest {
  maxResults?: number | undefined;
  nextToken?: string | undefined;
}
export interface AgentSummary {
  agentId: string | undefined;
  agentName: string | undefined;
  agentStatus: AgentStatus | undefined;
  description?: string | undefined;
  updatedAt: Date | undefined;
  latestAgentVersion?: string | undefined;
  guardrailConfiguration?: GuardrailConfiguration | undefined;
}
export interface ListAgentsResponse {
  agentSummaries: AgentSummary[] | undefined;
  nextToken?: string | undefined;
}
export interface PrepareAgentRequest {
  agentId: string | undefined;
}
export interface PrepareAgentResponse {
  agentId: string | undefined;
  agentStatus: AgentStatus | undefined;
  agentVersion: string | undefined;
  preparedAt: Date | undefined;
}
export interface UpdateAgentRequest {
  agentId: string | undefined;
  agentName: string | undefined;
  instruction?: string | undefined;
  foundationModel: string | undefined;
  description?: string | undefined;
  orchestrationType?: OrchestrationType | undefined;
  customOrchestration?: CustomOrchestration | undefined;
  idleSessionTTLInSeconds?: number | undefined;
  agentResourceRoleArn: string | undefined;
  customerEncryptionKeyArn?: string | undefined;
  promptOverrideConfiguration?: PromptOverrideConfiguration | undefined;
  guardrailConfiguration?: GuardrailConfiguration | undefined;
  memoryConfiguration?: MemoryConfiguration | undefined;
  agentCollaboration?: AgentCollaboration | undefined;
}
export interface UpdateAgentResponse {
  agent: Agent | undefined;
}
export interface AgentVersion {
  agentId: string | undefined;
  agentName: string | undefined;
  agentArn: string | undefined;
  version: string | undefined;
  instruction?: string | undefined;
  agentStatus: AgentStatus | undefined;
  foundationModel?: string | undefined;
  description?: string | undefined;
  idleSessionTTLInSeconds: number | undefined;
  agentResourceRoleArn: string | undefined;
  customerEncryptionKeyArn?: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  failureReasons?: string[] | undefined;
  recommendedActions?: string[] | undefined;
  promptOverrideConfiguration?: PromptOverrideConfiguration | undefined;
  guardrailConfiguration?: GuardrailConfiguration | undefined;
  memoryConfiguration?: MemoryConfiguration | undefined;
  agentCollaboration?: AgentCollaboration | undefined;
}
export interface AgentVersionSummary {
  agentName: string | undefined;
  agentStatus: AgentStatus | undefined;
  agentVersion: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  description?: string | undefined;
  guardrailConfiguration?: GuardrailConfiguration | undefined;
}
export interface CreateAgentAliasRequest {
  agentId: string | undefined;
  agentAliasName: string | undefined;
  clientToken?: string | undefined;
  description?: string | undefined;
  routingConfiguration?: AgentAliasRoutingConfigurationListItem[] | undefined;
  tags?: Record<string, string> | undefined;
}
export interface CreateAgentAliasResponse {
  agentAlias: AgentAlias | undefined;
}
export interface DeleteAgentAliasRequest {
  agentId: string | undefined;
  agentAliasId: string | undefined;
}
export interface DeleteAgentAliasResponse {
  agentId: string | undefined;
  agentAliasId: string | undefined;
  agentAliasStatus: AgentAliasStatus | undefined;
}
export interface GetAgentAliasRequest {
  agentId: string | undefined;
  agentAliasId: string | undefined;
}
export interface GetAgentAliasResponse {
  agentAlias: AgentAlias | undefined;
}
export interface ListAgentAliasesRequest {
  agentId: string | undefined;
  maxResults?: number | undefined;
  nextToken?: string | undefined;
}
export interface ListAgentAliasesResponse {
  agentAliasSummaries: AgentAliasSummary[] | undefined;
  nextToken?: string | undefined;
}
export interface UpdateAgentAliasRequest {
  agentId: string | undefined;
  agentAliasId: string | undefined;
  agentAliasName: string | undefined;
  description?: string | undefined;
  routingConfiguration?: AgentAliasRoutingConfigurationListItem[] | undefined;
  aliasInvocationState?: AliasInvocationState | undefined;
}
export interface UpdateAgentAliasResponse {
  agentAlias: AgentAlias | undefined;
}
export declare const DataDeletionPolicy: {
  readonly DELETE: "DELETE";
  readonly RETAIN: "RETAIN";
};
export type DataDeletionPolicy =
  (typeof DataDeletionPolicy)[keyof typeof DataDeletionPolicy];
export interface PatternObjectFilter {
  objectType: string | undefined;
  inclusionFilters?: string[] | undefined;
  exclusionFilters?: string[] | undefined;
}
export interface PatternObjectFilterConfiguration {
  filters: PatternObjectFilter[] | undefined;
}
export declare const CrawlFilterConfigurationType: {
  readonly PATTERN: "PATTERN";
};
export type CrawlFilterConfigurationType =
  (typeof CrawlFilterConfigurationType)[keyof typeof CrawlFilterConfigurationType];
export interface CrawlFilterConfiguration {
  type: CrawlFilterConfigurationType | undefined;
  patternObjectFilter?: PatternObjectFilterConfiguration | undefined;
}
export interface ConfluenceCrawlerConfiguration {
  filterConfiguration?: CrawlFilterConfiguration | undefined;
}
export declare const ConfluenceAuthType: {
  readonly BASIC: "BASIC";
  readonly OAUTH2_CLIENT_CREDENTIALS: "OAUTH2_CLIENT_CREDENTIALS";
};
export type ConfluenceAuthType =
  (typeof ConfluenceAuthType)[keyof typeof ConfluenceAuthType];
export declare const ConfluenceHostType: {
  readonly SAAS: "SAAS";
};
export type ConfluenceHostType =
  (typeof ConfluenceHostType)[keyof typeof ConfluenceHostType];
export interface ConfluenceSourceConfiguration {
  hostUrl: string | undefined;
  hostType: ConfluenceHostType | undefined;
  authType: ConfluenceAuthType | undefined;
  credentialsSecretArn: string | undefined;
}
export interface ConfluenceDataSourceConfiguration {
  sourceConfiguration: ConfluenceSourceConfiguration | undefined;
  crawlerConfiguration?: ConfluenceCrawlerConfiguration | undefined;
}
export interface S3DataSourceConfiguration {
  bucketArn: string | undefined;
  inclusionPrefixes?: string[] | undefined;
  bucketOwnerAccountId?: string | undefined;
}
export interface SalesforceCrawlerConfiguration {
  filterConfiguration?: CrawlFilterConfiguration | undefined;
}
export declare const SalesforceAuthType: {
  readonly OAUTH2_CLIENT_CREDENTIALS: "OAUTH2_CLIENT_CREDENTIALS";
};
export type SalesforceAuthType =
  (typeof SalesforceAuthType)[keyof typeof SalesforceAuthType];
export interface SalesforceSourceConfiguration {
  hostUrl: string | undefined;
  authType: SalesforceAuthType | undefined;
  credentialsSecretArn: string | undefined;
}
export interface SalesforceDataSourceConfiguration {
  sourceConfiguration: SalesforceSourceConfiguration | undefined;
  crawlerConfiguration?: SalesforceCrawlerConfiguration | undefined;
}
export interface SharePointCrawlerConfiguration {
  filterConfiguration?: CrawlFilterConfiguration | undefined;
}
export declare const SharePointAuthType: {
  readonly OAUTH2_CLIENT_CREDENTIALS: "OAUTH2_CLIENT_CREDENTIALS";
  readonly OAUTH2_SHAREPOINT_APP_ONLY_CLIENT_CREDENTIALS: "OAUTH2_SHAREPOINT_APP_ONLY_CLIENT_CREDENTIALS";
};
export type SharePointAuthType =
  (typeof SharePointAuthType)[keyof typeof SharePointAuthType];
export declare const SharePointHostType: {
  readonly ONLINE: "ONLINE";
};
export type SharePointHostType =
  (typeof SharePointHostType)[keyof typeof SharePointHostType];
export interface SharePointSourceConfiguration {
  tenantId?: string | undefined;
  domain: string | undefined;
  siteUrls: string[] | undefined;
  hostType: SharePointHostType | undefined;
  authType: SharePointAuthType | undefined;
  credentialsSecretArn: string | undefined;
}
export interface SharePointDataSourceConfiguration {
  sourceConfiguration: SharePointSourceConfiguration | undefined;
  crawlerConfiguration?: SharePointCrawlerConfiguration | undefined;
}
export declare const DataSourceType: {
  readonly CONFLUENCE: "CONFLUENCE";
  readonly CUSTOM: "CUSTOM";
  readonly REDSHIFT_METADATA: "REDSHIFT_METADATA";
  readonly S3: "S3";
  readonly SALESFORCE: "SALESFORCE";
  readonly SHAREPOINT: "SHAREPOINT";
  readonly WEB: "WEB";
};
export type DataSourceType =
  (typeof DataSourceType)[keyof typeof DataSourceType];
export interface WebCrawlerLimits {
  rateLimit?: number | undefined;
  maxPages?: number | undefined;
}
export declare const WebScopeType: {
  readonly HOST_ONLY: "HOST_ONLY";
  readonly SUBDOMAINS: "SUBDOMAINS";
};
export type WebScopeType = (typeof WebScopeType)[keyof typeof WebScopeType];
export interface WebCrawlerConfiguration {
  crawlerLimits?: WebCrawlerLimits | undefined;
  inclusionFilters?: string[] | undefined;
  exclusionFilters?: string[] | undefined;
  scope?: WebScopeType | undefined;
  userAgent?: string | undefined;
  userAgentHeader?: string | undefined;
}
export interface SeedUrl {
  url?: string | undefined;
}
export interface UrlConfiguration {
  seedUrls?: SeedUrl[] | undefined;
}
export interface WebSourceConfiguration {
  urlConfiguration: UrlConfiguration | undefined;
}
export interface WebDataSourceConfiguration {
  sourceConfiguration: WebSourceConfiguration | undefined;
  crawlerConfiguration?: WebCrawlerConfiguration | undefined;
}
export interface DataSourceConfiguration {
  type: DataSourceType | undefined;
  s3Configuration?: S3DataSourceConfiguration | undefined;
  webConfiguration?: WebDataSourceConfiguration | undefined;
  confluenceConfiguration?: ConfluenceDataSourceConfiguration | undefined;
  salesforceConfiguration?: SalesforceDataSourceConfiguration | undefined;
  sharePointConfiguration?: SharePointDataSourceConfiguration | undefined;
}
export interface ServerSideEncryptionConfiguration {
  kmsKeyArn?: string | undefined;
}
export declare const ChunkingStrategy: {
  readonly FIXED_SIZE: "FIXED_SIZE";
  readonly HIERARCHICAL: "HIERARCHICAL";
  readonly NONE: "NONE";
  readonly SEMANTIC: "SEMANTIC";
};
export type ChunkingStrategy =
  (typeof ChunkingStrategy)[keyof typeof ChunkingStrategy];
export interface FixedSizeChunkingConfiguration {
  maxTokens: number | undefined;
  overlapPercentage: number | undefined;
}
export interface HierarchicalChunkingLevelConfiguration {
  maxTokens: number | undefined;
}
export interface HierarchicalChunkingConfiguration {
  levelConfigurations: HierarchicalChunkingLevelConfiguration[] | undefined;
  overlapTokens: number | undefined;
}
export interface SemanticChunkingConfiguration {
  maxTokens: number | undefined;
  bufferSize: number | undefined;
  breakpointPercentileThreshold: number | undefined;
}
export interface ChunkingConfiguration {
  chunkingStrategy: ChunkingStrategy | undefined;
  fixedSizeChunkingConfiguration?: FixedSizeChunkingConfiguration | undefined;
  hierarchicalChunkingConfiguration?:
    | HierarchicalChunkingConfiguration
    | undefined;
  semanticChunkingConfiguration?: SemanticChunkingConfiguration | undefined;
}
export declare const EnrichmentStrategyMethod: {
  readonly CHUNK_ENTITY_EXTRACTION: "CHUNK_ENTITY_EXTRACTION";
};
export type EnrichmentStrategyMethod =
  (typeof EnrichmentStrategyMethod)[keyof typeof EnrichmentStrategyMethod];
export interface EnrichmentStrategyConfiguration {
  method: EnrichmentStrategyMethod | undefined;
}
export interface BedrockFoundationModelContextEnrichmentConfiguration {
  enrichmentStrategyConfiguration: EnrichmentStrategyConfiguration | undefined;
  modelArn: string | undefined;
}
export declare const ContextEnrichmentType: {
  readonly BEDROCK_FOUNDATION_MODEL: "BEDROCK_FOUNDATION_MODEL";
};
export type ContextEnrichmentType =
  (typeof ContextEnrichmentType)[keyof typeof ContextEnrichmentType];
export interface ContextEnrichmentConfiguration {
  type: ContextEnrichmentType | undefined;
  bedrockFoundationModelConfiguration?:
    | BedrockFoundationModelContextEnrichmentConfiguration
    | undefined;
}
export interface S3Location {
  uri: string | undefined;
}
export interface IntermediateStorage {
  s3Location: S3Location | undefined;
}
export declare const StepType: {
  readonly POST_CHUNKING: "POST_CHUNKING";
};
export type StepType = (typeof StepType)[keyof typeof StepType];
export interface TransformationLambdaConfiguration {
  lambdaArn: string | undefined;
}
export interface TransformationFunction {
  transformationLambdaConfiguration:
    | TransformationLambdaConfiguration
    | undefined;
}
export interface Transformation {
  transformationFunction: TransformationFunction | undefined;
  stepToApply: StepType | undefined;
}
export interface CustomTransformationConfiguration {
  intermediateStorage: IntermediateStorage | undefined;
  transformations: Transformation[] | undefined;
}
export declare const ParsingModality: {
  readonly MULTIMODAL: "MULTIMODAL";
};
export type ParsingModality =
  (typeof ParsingModality)[keyof typeof ParsingModality];
export interface BedrockDataAutomationConfiguration {
  parsingModality?: ParsingModality | undefined;
}
export interface ParsingPrompt {
  parsingPromptText: string | undefined;
}
export interface BedrockFoundationModelConfiguration {
  modelArn: string | undefined;
  parsingPrompt?: ParsingPrompt | undefined;
  parsingModality?: ParsingModality | undefined;
}
export declare const ParsingStrategy: {
  readonly BEDROCK_DATA_AUTOMATION: "BEDROCK_DATA_AUTOMATION";
  readonly BEDROCK_FOUNDATION_MODEL: "BEDROCK_FOUNDATION_MODEL";
};
export type ParsingStrategy =
  (typeof ParsingStrategy)[keyof typeof ParsingStrategy];
export interface ParsingConfiguration {
  parsingStrategy: ParsingStrategy | undefined;
  bedrockFoundationModelConfiguration?:
    | BedrockFoundationModelConfiguration
    | undefined;
  bedrockDataAutomationConfiguration?:
    | BedrockDataAutomationConfiguration
    | undefined;
}
export interface VectorIngestionConfiguration {
  chunkingConfiguration?: ChunkingConfiguration | undefined;
  customTransformationConfiguration?:
    | CustomTransformationConfiguration
    | undefined;
  parsingConfiguration?: ParsingConfiguration | undefined;
  contextEnrichmentConfiguration?: ContextEnrichmentConfiguration | undefined;
}
export interface CreateDataSourceRequest {
  knowledgeBaseId: string | undefined;
  clientToken?: string | undefined;
  name: string | undefined;
  description?: string | undefined;
  dataSourceConfiguration: DataSourceConfiguration | undefined;
  dataDeletionPolicy?: DataDeletionPolicy | undefined;
  serverSideEncryptionConfiguration?:
    | ServerSideEncryptionConfiguration
    | undefined;
  vectorIngestionConfiguration?: VectorIngestionConfiguration | undefined;
}
export declare const DataSourceStatus: {
  readonly AVAILABLE: "AVAILABLE";
  readonly DELETE_UNSUCCESSFUL: "DELETE_UNSUCCESSFUL";
  readonly DELETING: "DELETING";
};
export type DataSourceStatus =
  (typeof DataSourceStatus)[keyof typeof DataSourceStatus];
export interface DataSource {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  name: string | undefined;
  status: DataSourceStatus | undefined;
  description?: string | undefined;
  dataSourceConfiguration: DataSourceConfiguration | undefined;
  serverSideEncryptionConfiguration?:
    | ServerSideEncryptionConfiguration
    | undefined;
  vectorIngestionConfiguration?: VectorIngestionConfiguration | undefined;
  dataDeletionPolicy?: DataDeletionPolicy | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  failureReasons?: string[] | undefined;
}
export interface CreateDataSourceResponse {
  dataSource: DataSource | undefined;
}
export interface DeleteDataSourceRequest {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
}
export interface DeleteDataSourceResponse {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  status: DataSourceStatus | undefined;
}
export interface GetDataSourceRequest {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
}
export interface GetDataSourceResponse {
  dataSource: DataSource | undefined;
}
export interface ListDataSourcesRequest {
  knowledgeBaseId: string | undefined;
  maxResults?: number | undefined;
  nextToken?: string | undefined;
}
export interface DataSourceSummary {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  name: string | undefined;
  status: DataSourceStatus | undefined;
  description?: string | undefined;
  updatedAt: Date | undefined;
}
export interface ListDataSourcesResponse {
  dataSourceSummaries: DataSourceSummary[] | undefined;
  nextToken?: string | undefined;
}
export interface UpdateDataSourceRequest {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  name: string | undefined;
  description?: string | undefined;
  dataSourceConfiguration: DataSourceConfiguration | undefined;
  dataDeletionPolicy?: DataDeletionPolicy | undefined;
  serverSideEncryptionConfiguration?:
    | ServerSideEncryptionConfiguration
    | undefined;
  vectorIngestionConfiguration?: VectorIngestionConfiguration | undefined;
}
export interface UpdateDataSourceResponse {
  dataSource: DataSource | undefined;
}
export interface FlowConditionalConnectionConfiguration {
  condition: string | undefined;
}
export interface FlowDataConnectionConfiguration {
  sourceOutput: string | undefined;
  targetInput: string | undefined;
}
export type FlowConnectionConfiguration =
  | FlowConnectionConfiguration.ConditionalMember
  | FlowConnectionConfiguration.DataMember
  | FlowConnectionConfiguration.$UnknownMember;
export declare namespace FlowConnectionConfiguration {
  interface DataMember {
    data: FlowDataConnectionConfiguration;
    conditional?: never;
    $unknown?: never;
  }
  interface ConditionalMember {
    data?: never;
    conditional: FlowConditionalConnectionConfiguration;
    $unknown?: never;
  }
  interface $UnknownMember {
    data?: never;
    conditional?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    data: (value: FlowDataConnectionConfiguration) => T;
    conditional: (value: FlowConditionalConnectionConfiguration) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: FlowConnectionConfiguration,
    visitor: Visitor<T>
  ) => T;
}
export declare const FlowConnectionType: {
  readonly CONDITIONAL: "Conditional";
  readonly DATA: "Data";
};
export type FlowConnectionType =
  (typeof FlowConnectionType)[keyof typeof FlowConnectionType];
export interface FlowConnection {
  type: FlowConnectionType | undefined;
  name: string | undefined;
  source: string | undefined;
  target: string | undefined;
  configuration?: FlowConnectionConfiguration | undefined;
}
export interface CollectorFlowNodeConfiguration {}
export interface FlowCondition {
  name: string | undefined;
  expression?: string | undefined;
}
export interface ConditionFlowNodeConfiguration {
  conditions: FlowCondition[] | undefined;
}
export declare const SupportedLanguages: {
  readonly PYTHON_3: "Python_3";
};
export type SupportedLanguages =
  (typeof SupportedLanguages)[keyof typeof SupportedLanguages];
export interface InlineCodeFlowNodeConfiguration {
  code: string | undefined;
  language: SupportedLanguages | undefined;
}
export interface InputFlowNodeConfiguration {}
export interface IteratorFlowNodeConfiguration {}
export interface PromptModelInferenceConfiguration {
  temperature?: number | undefined;
  topP?: number | undefined;
  maxTokens?: number | undefined;
  stopSequences?: string[] | undefined;
}
export type PromptInferenceConfiguration =
  | PromptInferenceConfiguration.TextMember
  | PromptInferenceConfiguration.$UnknownMember;
export declare namespace PromptInferenceConfiguration {
  interface TextMember {
    text: PromptModelInferenceConfiguration;
    $unknown?: never;
  }
  interface $UnknownMember {
    text?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    text: (value: PromptModelInferenceConfiguration) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: PromptInferenceConfiguration,
    visitor: Visitor<T>
  ) => T;
}
export declare const PerformanceConfigLatency: {
  readonly OPTIMIZED: "optimized";
  readonly STANDARD: "standard";
};
export type PerformanceConfigLatency =
  (typeof PerformanceConfigLatency)[keyof typeof PerformanceConfigLatency];
export interface PerformanceConfiguration {
  latency?: PerformanceConfigLatency | undefined;
}
export interface KnowledgeBasePromptTemplate {
  textPromptTemplate?: string | undefined;
}
export interface KnowledgeBaseOrchestrationConfiguration {
  promptTemplate?: KnowledgeBasePromptTemplate | undefined;
  inferenceConfig?: PromptInferenceConfiguration | undefined;
  additionalModelRequestFields?: Record<string, __DocumentType> | undefined;
  performanceConfig?: PerformanceConfiguration | undefined;
}
export declare const RerankingMetadataSelectionMode: {
  readonly ALL: "ALL";
  readonly SELECTIVE: "SELECTIVE";
};
export type RerankingMetadataSelectionMode =
  (typeof RerankingMetadataSelectionMode)[keyof typeof RerankingMetadataSelectionMode];
export interface FieldForReranking {
  fieldName: string | undefined;
}
export type RerankingMetadataSelectiveModeConfiguration =
  | RerankingMetadataSelectiveModeConfiguration.FieldsToExcludeMember
  | RerankingMetadataSelectiveModeConfiguration.FieldsToIncludeMember
  | RerankingMetadataSelectiveModeConfiguration.$UnknownMember;
export declare namespace RerankingMetadataSelectiveModeConfiguration {
  interface FieldsToIncludeMember {
    fieldsToInclude: FieldForReranking[];
    fieldsToExclude?: never;
    $unknown?: never;
  }
  interface FieldsToExcludeMember {
    fieldsToInclude?: never;
    fieldsToExclude: FieldForReranking[];
    $unknown?: never;
  }
  interface $UnknownMember {
    fieldsToInclude?: never;
    fieldsToExclude?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    fieldsToInclude: (value: FieldForReranking[]) => T;
    fieldsToExclude: (value: FieldForReranking[]) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: RerankingMetadataSelectiveModeConfiguration,
    visitor: Visitor<T>
  ) => T;
}
export interface MetadataConfigurationForReranking {
  selectionMode: RerankingMetadataSelectionMode | undefined;
  selectiveModeConfiguration?:
    | RerankingMetadataSelectiveModeConfiguration
    | undefined;
}
export interface VectorSearchBedrockRerankingModelConfiguration {
  modelArn: string | undefined;
  additionalModelRequestFields?: Record<string, __DocumentType> | undefined;
}
export interface VectorSearchBedrockRerankingConfiguration {
  modelConfiguration:
    | VectorSearchBedrockRerankingModelConfiguration
    | undefined;
  numberOfRerankedResults?: number | undefined;
  metadataConfiguration?: MetadataConfigurationForReranking | undefined;
}
export declare const VectorSearchRerankingConfigurationType: {
  readonly BEDROCK_RERANKING_MODEL: "BEDROCK_RERANKING_MODEL";
};
export type VectorSearchRerankingConfigurationType =
  (typeof VectorSearchRerankingConfigurationType)[keyof typeof VectorSearchRerankingConfigurationType];
export interface VectorSearchRerankingConfiguration {
  type: VectorSearchRerankingConfigurationType | undefined;
  bedrockRerankingConfiguration?:
    | VectorSearchBedrockRerankingConfiguration
    | undefined;
}
export interface KnowledgeBaseFlowNodeConfiguration {
  knowledgeBaseId: string | undefined;
  modelId?: string | undefined;
  guardrailConfiguration?: GuardrailConfiguration | undefined;
  numberOfResults?: number | undefined;
  promptTemplate?: KnowledgeBasePromptTemplate | undefined;
  inferenceConfiguration?: PromptInferenceConfiguration | undefined;
  rerankingConfiguration?: VectorSearchRerankingConfiguration | undefined;
  orchestrationConfiguration?:
    | KnowledgeBaseOrchestrationConfiguration
    | undefined;
}
export interface LambdaFunctionFlowNodeConfiguration {
  lambdaArn: string | undefined;
}
export interface LexFlowNodeConfiguration {
  botAliasArn: string | undefined;
  localeId: string | undefined;
}
export interface LoopControllerFlowNodeConfiguration {
  continueCondition: FlowCondition | undefined;
  maxIterations?: number | undefined;
}
export interface LoopInputFlowNodeConfiguration {}
export interface OutputFlowNodeConfiguration {}
export interface PromptInputVariable {
  name?: string | undefined;
}
export declare const CachePointType: {
  readonly DEFAULT: "default";
};
export type CachePointType =
  (typeof CachePointType)[keyof typeof CachePointType];
export interface CachePointBlock {
  type: CachePointType | undefined;
}
export type ContentBlock =
  | ContentBlock.CachePointMember
  | ContentBlock.TextMember
  | ContentBlock.$UnknownMember;
export declare namespace ContentBlock {
  interface TextMember {
    text: string;
    cachePoint?: never;
    $unknown?: never;
  }
  interface CachePointMember {
    text?: never;
    cachePoint: CachePointBlock;
    $unknown?: never;
  }
  interface $UnknownMember {
    text?: never;
    cachePoint?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    text: (value: string) => T;
    cachePoint: (value: CachePointBlock) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: ContentBlock, visitor: Visitor<T>) => T;
}
export declare const ConversationRole: {
  readonly ASSISTANT: "assistant";
  readonly USER: "user";
};
export type ConversationRole =
  (typeof ConversationRole)[keyof typeof ConversationRole];
export interface Message {
  role: ConversationRole | undefined;
  content: ContentBlock[] | undefined;
}
export type SystemContentBlock =
  | SystemContentBlock.CachePointMember
  | SystemContentBlock.TextMember
  | SystemContentBlock.$UnknownMember;
export declare namespace SystemContentBlock {
  interface TextMember {
    text: string;
    cachePoint?: never;
    $unknown?: never;
  }
  interface CachePointMember {
    text?: never;
    cachePoint: CachePointBlock;
    $unknown?: never;
  }
  interface $UnknownMember {
    text?: never;
    cachePoint?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    text: (value: string) => T;
    cachePoint: (value: CachePointBlock) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: SystemContentBlock, visitor: Visitor<T>) => T;
}
export interface AnyToolChoice {}
export interface AutoToolChoice {}
export interface SpecificToolChoice {
  name: string | undefined;
}
export type ToolChoice =
  | ToolChoice.AnyMember
  | ToolChoice.AutoMember
  | ToolChoice.ToolMember
  | ToolChoice.$UnknownMember;
export declare namespace ToolChoice {
  interface AutoMember {
    auto: AutoToolChoice;
    any?: never;
    tool?: never;
    $unknown?: never;
  }
  interface AnyMember {
    auto?: never;
    any: AnyToolChoice;
    tool?: never;
    $unknown?: never;
  }
  interface ToolMember {
    auto?: never;
    any?: never;
    tool: SpecificToolChoice;
    $unknown?: never;
  }
  interface $UnknownMember {
    auto?: never;
    any?: never;
    tool?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    auto: (value: AutoToolChoice) => T;
    any: (value: AnyToolChoice) => T;
    tool: (value: SpecificToolChoice) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: ToolChoice, visitor: Visitor<T>) => T;
}
export type ToolInputSchema =
  | ToolInputSchema.JsonMember
  | ToolInputSchema.$UnknownMember;
export declare namespace ToolInputSchema {
  interface JsonMember {
    json: __DocumentType;
    $unknown?: never;
  }
  interface $UnknownMember {
    json?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    json: (value: __DocumentType) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: ToolInputSchema, visitor: Visitor<T>) => T;
}
export interface ToolSpecification {
  name: string | undefined;
  description?: string | undefined;
  inputSchema: ToolInputSchema | undefined;
}
export type Tool =
  | Tool.CachePointMember
  | Tool.ToolSpecMember
  | Tool.$UnknownMember;
export declare namespace Tool {
  interface ToolSpecMember {
    toolSpec: ToolSpecification;
    cachePoint?: never;
    $unknown?: never;
  }
  interface CachePointMember {
    toolSpec?: never;
    cachePoint: CachePointBlock;
    $unknown?: never;
  }
  interface $UnknownMember {
    toolSpec?: never;
    cachePoint?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    toolSpec: (value: ToolSpecification) => T;
    cachePoint: (value: CachePointBlock) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: Tool, visitor: Visitor<T>) => T;
}
export interface ToolConfiguration {
  tools: Tool[] | undefined;
  toolChoice?: ToolChoice | undefined;
}
export interface ChatPromptTemplateConfiguration {
  messages: Message[] | undefined;
  system?: SystemContentBlock[] | undefined;
  inputVariables?: PromptInputVariable[] | undefined;
  toolConfiguration?: ToolConfiguration | undefined;
}
export interface TextPromptTemplateConfiguration {
  text: string | undefined;
  cachePoint?: CachePointBlock | undefined;
  inputVariables?: PromptInputVariable[] | undefined;
}
export type PromptTemplateConfiguration =
  | PromptTemplateConfiguration.ChatMember
  | PromptTemplateConfiguration.TextMember
  | PromptTemplateConfiguration.$UnknownMember;
export declare namespace PromptTemplateConfiguration {
  interface TextMember {
    text: TextPromptTemplateConfiguration;
    chat?: never;
    $unknown?: never;
  }
  interface ChatMember {
    text?: never;
    chat: ChatPromptTemplateConfiguration;
    $unknown?: never;
  }
  interface $UnknownMember {
    text?: never;
    chat?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    text: (value: TextPromptTemplateConfiguration) => T;
    chat: (value: ChatPromptTemplateConfiguration) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: PromptTemplateConfiguration,
    visitor: Visitor<T>
  ) => T;
}
export declare const PromptTemplateType: {
  readonly CHAT: "CHAT";
  readonly TEXT: "TEXT";
};
export type PromptTemplateType =
  (typeof PromptTemplateType)[keyof typeof PromptTemplateType];
export interface PromptFlowNodeInlineConfiguration {
  templateType: PromptTemplateType | undefined;
  templateConfiguration: PromptTemplateConfiguration | undefined;
  modelId: string | undefined;
  inferenceConfiguration?: PromptInferenceConfiguration | undefined;
  additionalModelRequestFields?: __DocumentType | undefined;
}
export interface PromptFlowNodeResourceConfiguration {
  promptArn: string | undefined;
}
export type PromptFlowNodeSourceConfiguration =
  | PromptFlowNodeSourceConfiguration.InlineMember
  | PromptFlowNodeSourceConfiguration.ResourceMember
  | PromptFlowNodeSourceConfiguration.$UnknownMember;
export declare namespace PromptFlowNodeSourceConfiguration {
  interface ResourceMember {
    resource: PromptFlowNodeResourceConfiguration;
    inline?: never;
    $unknown?: never;
  }
  interface InlineMember {
    resource?: never;
    inline: PromptFlowNodeInlineConfiguration;
    $unknown?: never;
  }
  interface $UnknownMember {
    resource?: never;
    inline?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    resource: (value: PromptFlowNodeResourceConfiguration) => T;
    inline: (value: PromptFlowNodeInlineConfiguration) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: PromptFlowNodeSourceConfiguration,
    visitor: Visitor<T>
  ) => T;
}
export interface PromptFlowNodeConfiguration {
  sourceConfiguration: PromptFlowNodeSourceConfiguration | undefined;
  guardrailConfiguration?: GuardrailConfiguration | undefined;
}
export interface RetrievalFlowNodeS3Configuration {
  bucketName: string | undefined;
}
export type RetrievalFlowNodeServiceConfiguration =
  | RetrievalFlowNodeServiceConfiguration.S3Member
  | RetrievalFlowNodeServiceConfiguration.$UnknownMember;
export declare namespace RetrievalFlowNodeServiceConfiguration {
  interface S3Member {
    s3: RetrievalFlowNodeS3Configuration;
    $unknown?: never;
  }
  interface $UnknownMember {
    s3?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    s3: (value: RetrievalFlowNodeS3Configuration) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: RetrievalFlowNodeServiceConfiguration,
    visitor: Visitor<T>
  ) => T;
}
export interface RetrievalFlowNodeConfiguration {
  serviceConfiguration: RetrievalFlowNodeServiceConfiguration | undefined;
}
export interface StorageFlowNodeS3Configuration {
  bucketName: string | undefined;
}
export type StorageFlowNodeServiceConfiguration =
  | StorageFlowNodeServiceConfiguration.S3Member
  | StorageFlowNodeServiceConfiguration.$UnknownMember;
export declare namespace StorageFlowNodeServiceConfiguration {
  interface S3Member {
    s3: StorageFlowNodeS3Configuration;
    $unknown?: never;
  }
  interface $UnknownMember {
    s3?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    s3: (value: StorageFlowNodeS3Configuration) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: StorageFlowNodeServiceConfiguration,
    visitor: Visitor<T>
  ) => T;
}
export interface StorageFlowNodeConfiguration {
  serviceConfiguration: StorageFlowNodeServiceConfiguration | undefined;
}
export declare const FlowNodeInputCategory: {
  readonly EXIT_LOOP: "ExitLoop";
  readonly LOOP_CONDITION: "LoopCondition";
  readonly RETURN_VALUE_TO_LOOP_START: "ReturnValueToLoopStart";
};
export type FlowNodeInputCategory =
  (typeof FlowNodeInputCategory)[keyof typeof FlowNodeInputCategory];
export declare const FlowNodeIODataType: {
  readonly ARRAY: "Array";
  readonly BOOLEAN: "Boolean";
  readonly NUMBER: "Number";
  readonly OBJECT: "Object";
  readonly STRING: "String";
};
export type FlowNodeIODataType =
  (typeof FlowNodeIODataType)[keyof typeof FlowNodeIODataType];
export interface FlowNodeInput {
  name: string | undefined;
  type: FlowNodeIODataType | undefined;
  expression: string | undefined;
  category?: FlowNodeInputCategory | undefined;
}
export interface FlowNodeOutput {
  name: string | undefined;
  type: FlowNodeIODataType | undefined;
}
export declare const FlowNodeType: {
  readonly AGENT: "Agent";
  readonly COLLECTOR: "Collector";
  readonly CONDITION: "Condition";
  readonly INLINE_CODE: "InlineCode";
  readonly INPUT: "Input";
  readonly ITERATOR: "Iterator";
  readonly KNOWLEDGE_BASE: "KnowledgeBase";
  readonly LAMBDA_FUNCTION: "LambdaFunction";
  readonly LEX: "Lex";
  readonly LOOP: "Loop";
  readonly LOOP_CONTROLLER: "LoopController";
  readonly LOOP_INPUT: "LoopInput";
  readonly OUTPUT: "Output";
  readonly PROMPT: "Prompt";
  readonly RETRIEVAL: "Retrieval";
  readonly STORAGE: "Storage";
};
export type FlowNodeType = (typeof FlowNodeType)[keyof typeof FlowNodeType];
export declare const FlowStatus: {
  readonly FAILED: "Failed";
  readonly NOT_PREPARED: "NotPrepared";
  readonly PREPARED: "Prepared";
  readonly PREPARING: "Preparing";
};
export type FlowStatus = (typeof FlowStatus)[keyof typeof FlowStatus];
export interface DeleteFlowRequest {
  flowIdentifier: string | undefined;
  skipResourceInUseCheck?: boolean | undefined;
}
export interface DeleteFlowResponse {
  id: string | undefined;
}
export declare const ConcurrencyType: {
  readonly AUTOMATIC: "Automatic";
  readonly MANUAL: "Manual";
};
export type ConcurrencyType =
  (typeof ConcurrencyType)[keyof typeof ConcurrencyType];
export interface FlowAliasConcurrencyConfiguration {
  type: ConcurrencyType | undefined;
  maxConcurrency?: number | undefined;
}
export interface FlowAliasRoutingConfigurationListItem {
  flowVersion?: string | undefined;
}
export interface CreateFlowAliasRequest {
  name: string | undefined;
  description?: string | undefined;
  routingConfiguration: FlowAliasRoutingConfigurationListItem[] | undefined;
  concurrencyConfiguration?: FlowAliasConcurrencyConfiguration | undefined;
  flowIdentifier: string | undefined;
  clientToken?: string | undefined;
  tags?: Record<string, string> | undefined;
}
export interface CreateFlowAliasResponse {
  name: string | undefined;
  description?: string | undefined;
  routingConfiguration: FlowAliasRoutingConfigurationListItem[] | undefined;
  concurrencyConfiguration?: FlowAliasConcurrencyConfiguration | undefined;
  flowId: string | undefined;
  id: string | undefined;
  arn: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}
export interface DeleteFlowAliasRequest {
  flowIdentifier: string | undefined;
  aliasIdentifier: string | undefined;
}
export interface DeleteFlowAliasResponse {
  flowId: string | undefined;
  id: string | undefined;
}
export interface GetFlowAliasRequest {
  flowIdentifier: string | undefined;
  aliasIdentifier: string | undefined;
}
export interface GetFlowAliasResponse {
  name: string | undefined;
  description?: string | undefined;
  routingConfiguration: FlowAliasRoutingConfigurationListItem[] | undefined;
  concurrencyConfiguration?: FlowAliasConcurrencyConfiguration | undefined;
  flowId: string | undefined;
  id: string | undefined;
  arn: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}
export interface ListFlowAliasesRequest {
  flowIdentifier: string | undefined;
  maxResults?: number | undefined;
  nextToken?: string | undefined;
}
export interface FlowAliasSummary {
  name: string | undefined;
  description?: string | undefined;
  routingConfiguration: FlowAliasRoutingConfigurationListItem[] | undefined;
  concurrencyConfiguration?: FlowAliasConcurrencyConfiguration | undefined;
  flowId: string | undefined;
  id: string | undefined;
  arn: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}
export interface ListFlowAliasesResponse {
  flowAliasSummaries: FlowAliasSummary[] | undefined;
  nextToken?: string | undefined;
}
export interface UpdateFlowAliasRequest {
  name: string | undefined;
  description?: string | undefined;
  routingConfiguration: FlowAliasRoutingConfigurationListItem[] | undefined;
  concurrencyConfiguration?: FlowAliasConcurrencyConfiguration | undefined;
  flowIdentifier: string | undefined;
  aliasIdentifier: string | undefined;
}
export interface UpdateFlowAliasResponse {
  name: string | undefined;
  description?: string | undefined;
  routingConfiguration: FlowAliasRoutingConfigurationListItem[] | undefined;
  concurrencyConfiguration?: FlowAliasConcurrencyConfiguration | undefined;
  flowId: string | undefined;
  id: string | undefined;
  arn: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}
export interface CreateFlowVersionRequest {
  flowIdentifier: string | undefined;
  description?: string | undefined;
  clientToken?: string | undefined;
}
export interface DeleteFlowVersionRequest {
  flowIdentifier: string | undefined;
  flowVersion: string | undefined;
  skipResourceInUseCheck?: boolean | undefined;
}
export interface DeleteFlowVersionResponse {
  id: string | undefined;
  version: string | undefined;
}
export interface GetFlowVersionRequest {
  flowIdentifier: string | undefined;
  flowVersion: string | undefined;
}
export interface ListFlowVersionsRequest {
  flowIdentifier: string | undefined;
  maxResults?: number | undefined;
  nextToken?: string | undefined;
}
export interface FlowVersionSummary {
  id: string | undefined;
  arn: string | undefined;
  status: FlowStatus | undefined;
  createdAt: Date | undefined;
  version: string | undefined;
}
export interface ListFlowVersionsResponse {
  flowVersionSummaries: FlowVersionSummary[] | undefined;
  nextToken?: string | undefined;
}
export interface GetFlowRequest {
  flowIdentifier: string | undefined;
}
export interface CyclicConnectionFlowValidationDetails {
  connection: string | undefined;
}
export interface DuplicateConditionExpressionFlowValidationDetails {
  node: string | undefined;
  expression: string | undefined;
}
export interface DuplicateConnectionsFlowValidationDetails {
  source: string | undefined;
  target: string | undefined;
}
export interface IncompatibleConnectionDataTypeFlowValidationDetails {
  connection: string | undefined;
}
export interface InvalidLoopBoundaryFlowValidationDetails {
  connection: string | undefined;
  source: string | undefined;
  target: string | undefined;
}
export declare const IncompatibleLoopNodeType: {
  readonly COLLECTOR: "Collector";
  readonly CONDITION: "Condition";
  readonly INPUT: "Input";
  readonly ITERATOR: "Iterator";
};
export type IncompatibleLoopNodeType =
  (typeof IncompatibleLoopNodeType)[keyof typeof IncompatibleLoopNodeType];
export interface LoopIncompatibleNodeTypeFlowValidationDetails {
  node: string | undefined;
  incompatibleNodeType: IncompatibleLoopNodeType | undefined;
  incompatibleNodeName: string | undefined;
}
export interface MalformedConditionExpressionFlowValidationDetails {
  node: string | undefined;
  condition: string | undefined;
  cause: string | undefined;
}
export interface MalformedNodeInputExpressionFlowValidationDetails {
  node: string | undefined;
  input: string | undefined;
  cause: string | undefined;
}
export interface MismatchedNodeInputTypeFlowValidationDetails {
  node: string | undefined;
  input: string | undefined;
  expectedType: FlowNodeIODataType | undefined;
}
export interface MismatchedNodeOutputTypeFlowValidationDetails {
  node: string | undefined;
  output: string | undefined;
  expectedType: FlowNodeIODataType | undefined;
}
export interface MissingConnectionConfigurationFlowValidationDetails {
  connection: string | undefined;
}
export interface MissingDefaultConditionFlowValidationDetails {
  node: string | undefined;
}
export interface MissingEndingNodesFlowValidationDetails {}
export interface MissingLoopControllerNodeFlowValidationDetails {
  loopNode: string | undefined;
}
export interface MissingLoopInputNodeFlowValidationDetails {
  loopNode: string | undefined;
}
export interface MissingNodeConfigurationFlowValidationDetails {
  node: string | undefined;
}
export interface MissingNodeInputFlowValidationDetails {
  node: string | undefined;
  input: string | undefined;
}
export interface MissingNodeOutputFlowValidationDetails {
  node: string | undefined;
  output: string | undefined;
}
export interface MissingStartingNodesFlowValidationDetails {}
export interface MultipleLoopControllerNodesFlowValidationDetails {
  loopNode: string | undefined;
}
export interface MultipleLoopInputNodesFlowValidationDetails {
  loopNode: string | undefined;
}
export interface MultipleNodeInputConnectionsFlowValidationDetails {
  node: string | undefined;
  input: string | undefined;
}
export interface UnfulfilledNodeInputFlowValidationDetails {
  node: string | undefined;
  input: string | undefined;
}
export interface UnknownConnectionConditionFlowValidationDetails {
  connection: string | undefined;
}
export interface UnknownConnectionSourceFlowValidationDetails {
  connection: string | undefined;
}
export interface UnknownConnectionSourceOutputFlowValidationDetails {
  connection: string | undefined;
}
export interface UnknownConnectionTargetFlowValidationDetails {
  connection: string | undefined;
}
export interface UnknownConnectionTargetInputFlowValidationDetails {
  connection: string | undefined;
}
export interface UnknownNodeInputFlowValidationDetails {
  node: string | undefined;
  input: string | undefined;
}
export interface UnknownNodeOutputFlowValidationDetails {
  node: string | undefined;
  output: string | undefined;
}
export interface UnreachableNodeFlowValidationDetails {
  node: string | undefined;
}
export interface UnsatisfiedConnectionConditionsFlowValidationDetails {
  connection: string | undefined;
}
export interface UnspecifiedFlowValidationDetails {}
export type FlowValidationDetails =
  | FlowValidationDetails.CyclicConnectionMember
  | FlowValidationDetails.DuplicateConditionExpressionMember
  | FlowValidationDetails.DuplicateConnectionsMember
  | FlowValidationDetails.IncompatibleConnectionDataTypeMember
  | FlowValidationDetails.InvalidLoopBoundaryMember
  | FlowValidationDetails.LoopIncompatibleNodeTypeMember
  | FlowValidationDetails.MalformedConditionExpressionMember
  | FlowValidationDetails.MalformedNodeInputExpressionMember
  | FlowValidationDetails.MismatchedNodeInputTypeMember
  | FlowValidationDetails.MismatchedNodeOutputTypeMember
  | FlowValidationDetails.MissingConnectionConfigurationMember
  | FlowValidationDetails.MissingDefaultConditionMember
  | FlowValidationDetails.MissingEndingNodesMember
  | FlowValidationDetails.MissingLoopControllerNodeMember
  | FlowValidationDetails.MissingLoopInputNodeMember
  | FlowValidationDetails.MissingNodeConfigurationMember
  | FlowValidationDetails.MissingNodeInputMember
  | FlowValidationDetails.MissingNodeOutputMember
  | FlowValidationDetails.MissingStartingNodesMember
  | FlowValidationDetails.MultipleLoopControllerNodesMember
  | FlowValidationDetails.MultipleLoopInputNodesMember
  | FlowValidationDetails.MultipleNodeInputConnectionsMember
  | FlowValidationDetails.UnfulfilledNodeInputMember
  | FlowValidationDetails.UnknownConnectionConditionMember
  | FlowValidationDetails.UnknownConnectionSourceMember
  | FlowValidationDetails.UnknownConnectionSourceOutputMember
  | FlowValidationDetails.UnknownConnectionTargetMember
  | FlowValidationDetails.UnknownConnectionTargetInputMember
  | FlowValidationDetails.UnknownNodeInputMember
  | FlowValidationDetails.UnknownNodeOutputMember
  | FlowValidationDetails.UnreachableNodeMember
  | FlowValidationDetails.UnsatisfiedConnectionConditionsMember
  | FlowValidationDetails.UnspecifiedMember
  | FlowValidationDetails.$UnknownMember;
export declare namespace FlowValidationDetails {
  interface CyclicConnectionMember {
    cyclicConnection: CyclicConnectionFlowValidationDetails;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface DuplicateConnectionsMember {
    cyclicConnection?: never;
    duplicateConnections: DuplicateConnectionsFlowValidationDetails;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface DuplicateConditionExpressionMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression: DuplicateConditionExpressionFlowValidationDetails;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface UnreachableNodeMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode: UnreachableNodeFlowValidationDetails;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface UnknownConnectionSourceMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource: UnknownConnectionSourceFlowValidationDetails;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface UnknownConnectionSourceOutputMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput: UnknownConnectionSourceOutputFlowValidationDetails;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface UnknownConnectionTargetMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget: UnknownConnectionTargetFlowValidationDetails;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface UnknownConnectionTargetInputMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput: UnknownConnectionTargetInputFlowValidationDetails;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface UnknownConnectionConditionMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition: UnknownConnectionConditionFlowValidationDetails;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface MalformedConditionExpressionMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression: MalformedConditionExpressionFlowValidationDetails;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface MalformedNodeInputExpressionMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression: MalformedNodeInputExpressionFlowValidationDetails;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface MismatchedNodeInputTypeMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType: MismatchedNodeInputTypeFlowValidationDetails;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface MismatchedNodeOutputTypeMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType: MismatchedNodeOutputTypeFlowValidationDetails;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface IncompatibleConnectionDataTypeMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType: IncompatibleConnectionDataTypeFlowValidationDetails;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface MissingConnectionConfigurationMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration: MissingConnectionConfigurationFlowValidationDetails;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface MissingDefaultConditionMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition: MissingDefaultConditionFlowValidationDetails;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface MissingEndingNodesMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes: MissingEndingNodesFlowValidationDetails;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface MissingNodeConfigurationMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration: MissingNodeConfigurationFlowValidationDetails;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface MissingNodeInputMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput: MissingNodeInputFlowValidationDetails;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface MissingNodeOutputMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput: MissingNodeOutputFlowValidationDetails;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface MissingStartingNodesMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes: MissingStartingNodesFlowValidationDetails;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface MultipleNodeInputConnectionsMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections: MultipleNodeInputConnectionsFlowValidationDetails;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface UnfulfilledNodeInputMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput: UnfulfilledNodeInputFlowValidationDetails;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface UnsatisfiedConnectionConditionsMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions: UnsatisfiedConnectionConditionsFlowValidationDetails;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface UnspecifiedMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified: UnspecifiedFlowValidationDetails;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface UnknownNodeInputMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput: UnknownNodeInputFlowValidationDetails;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface UnknownNodeOutputMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput: UnknownNodeOutputFlowValidationDetails;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface MissingLoopInputNodeMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode: MissingLoopInputNodeFlowValidationDetails;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface MissingLoopControllerNodeMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode: MissingLoopControllerNodeFlowValidationDetails;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface MultipleLoopInputNodesMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes: MultipleLoopInputNodesFlowValidationDetails;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface MultipleLoopControllerNodesMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes: MultipleLoopControllerNodesFlowValidationDetails;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface LoopIncompatibleNodeTypeMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType: LoopIncompatibleNodeTypeFlowValidationDetails;
    invalidLoopBoundary?: never;
    $unknown?: never;
  }
  interface InvalidLoopBoundaryMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary: InvalidLoopBoundaryFlowValidationDetails;
    $unknown?: never;
  }
  interface $UnknownMember {
    cyclicConnection?: never;
    duplicateConnections?: never;
    duplicateConditionExpression?: never;
    unreachableNode?: never;
    unknownConnectionSource?: never;
    unknownConnectionSourceOutput?: never;
    unknownConnectionTarget?: never;
    unknownConnectionTargetInput?: never;
    unknownConnectionCondition?: never;
    malformedConditionExpression?: never;
    malformedNodeInputExpression?: never;
    mismatchedNodeInputType?: never;
    mismatchedNodeOutputType?: never;
    incompatibleConnectionDataType?: never;
    missingConnectionConfiguration?: never;
    missingDefaultCondition?: never;
    missingEndingNodes?: never;
    missingNodeConfiguration?: never;
    missingNodeInput?: never;
    missingNodeOutput?: never;
    missingStartingNodes?: never;
    multipleNodeInputConnections?: never;
    unfulfilledNodeInput?: never;
    unsatisfiedConnectionConditions?: never;
    unspecified?: never;
    unknownNodeInput?: never;
    unknownNodeOutput?: never;
    missingLoopInputNode?: never;
    missingLoopControllerNode?: never;
    multipleLoopInputNodes?: never;
    multipleLoopControllerNodes?: never;
    loopIncompatibleNodeType?: never;
    invalidLoopBoundary?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    cyclicConnection: (value: CyclicConnectionFlowValidationDetails) => T;
    duplicateConnections: (
      value: DuplicateConnectionsFlowValidationDetails
    ) => T;
    duplicateConditionExpression: (
      value: DuplicateConditionExpressionFlowValidationDetails
    ) => T;
    unreachableNode: (value: UnreachableNodeFlowValidationDetails) => T;
    unknownConnectionSource: (
      value: UnknownConnectionSourceFlowValidationDetails
    ) => T;
    unknownConnectionSourceOutput: (
      value: UnknownConnectionSourceOutputFlowValidationDetails
    ) => T;
    unknownConnectionTarget: (
      value: UnknownConnectionTargetFlowValidationDetails
    ) => T;
    unknownConnectionTargetInput: (
      value: UnknownConnectionTargetInputFlowValidationDetails
    ) => T;
    unknownConnectionCondition: (
      value: UnknownConnectionConditionFlowValidationDetails
    ) => T;
    malformedConditionExpression: (
      value: MalformedConditionExpressionFlowValidationDetails
    ) => T;
    malformedNodeInputExpression: (
      value: MalformedNodeInputExpressionFlowValidationDetails
    ) => T;
    mismatchedNodeInputType: (
      value: MismatchedNodeInputTypeFlowValidationDetails
    ) => T;
    mismatchedNodeOutputType: (
      value: MismatchedNodeOutputTypeFlowValidationDetails
    ) => T;
    incompatibleConnectionDataType: (
      value: IncompatibleConnectionDataTypeFlowValidationDetails
    ) => T;
    missingConnectionConfiguration: (
      value: MissingConnectionConfigurationFlowValidationDetails
    ) => T;
    missingDefaultCondition: (
      value: MissingDefaultConditionFlowValidationDetails
    ) => T;
    missingEndingNodes: (value: MissingEndingNodesFlowValidationDetails) => T;
    missingNodeConfiguration: (
      value: MissingNodeConfigurationFlowValidationDetails
    ) => T;
    missingNodeInput: (value: MissingNodeInputFlowValidationDetails) => T;
    missingNodeOutput: (value: MissingNodeOutputFlowValidationDetails) => T;
    missingStartingNodes: (
      value: MissingStartingNodesFlowValidationDetails
    ) => T;
    multipleNodeInputConnections: (
      value: MultipleNodeInputConnectionsFlowValidationDetails
    ) => T;
    unfulfilledNodeInput: (
      value: UnfulfilledNodeInputFlowValidationDetails
    ) => T;
    unsatisfiedConnectionConditions: (
      value: UnsatisfiedConnectionConditionsFlowValidationDetails
    ) => T;
    unspecified: (value: UnspecifiedFlowValidationDetails) => T;
    unknownNodeInput: (value: UnknownNodeInputFlowValidationDetails) => T;
    unknownNodeOutput: (value: UnknownNodeOutputFlowValidationDetails) => T;
    missingLoopInputNode: (
      value: MissingLoopInputNodeFlowValidationDetails
    ) => T;
    missingLoopControllerNode: (
      value: MissingLoopControllerNodeFlowValidationDetails
    ) => T;
    multipleLoopInputNodes: (
      value: MultipleLoopInputNodesFlowValidationDetails
    ) => T;
    multipleLoopControllerNodes: (
      value: MultipleLoopControllerNodesFlowValidationDetails
    ) => T;
    loopIncompatibleNodeType: (
      value: LoopIncompatibleNodeTypeFlowValidationDetails
    ) => T;
    invalidLoopBoundary: (value: InvalidLoopBoundaryFlowValidationDetails) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: FlowValidationDetails, visitor: Visitor<T>) => T;
}
export declare const FlowValidationSeverity: {
  readonly ERROR: "Error";
  readonly WARNING: "Warning";
};
export type FlowValidationSeverity =
  (typeof FlowValidationSeverity)[keyof typeof FlowValidationSeverity];
export declare const FlowValidationType: {
  readonly CYCLIC_CONNECTION: "CyclicConnection";
  readonly DUPLICATE_CONDITION_EXPRESSION: "DuplicateConditionExpression";
  readonly DUPLICATE_CONNECTIONS: "DuplicateConnections";
  readonly INCOMPATIBLE_CONNECTION_DATA_TYPE: "IncompatibleConnectionDataType";
  readonly INVALID_LOOP_BOUNDARY: "InvalidLoopBoundary";
  readonly LOOP_INCOMPATIBLE_NODE_TYPE: "LoopIncompatibleNodeType";
  readonly MALFORMED_CONDITION_EXPRESSION: "MalformedConditionExpression";
  readonly MALFORMED_NODE_INPUT_EXPRESSION: "MalformedNodeInputExpression";
  readonly MISMATCHED_NODE_INPUT_TYPE: "MismatchedNodeInputType";
  readonly MISMATCHED_NODE_OUTPUT_TYPE: "MismatchedNodeOutputType";
  readonly MISSING_CONNECTION_CONFIGURATION: "MissingConnectionConfiguration";
  readonly MISSING_DEFAULT_CONDITION: "MissingDefaultCondition";
  readonly MISSING_ENDING_NODES: "MissingEndingNodes";
  readonly MISSING_LOOP_CONTROLLER_NODE: "MissingLoopControllerNode";
  readonly MISSING_LOOP_INPUT_NODE: "MissingLoopInputNode";
  readonly MISSING_NODE_CONFIGURATION: "MissingNodeConfiguration";
  readonly MISSING_NODE_INPUT: "MissingNodeInput";
  readonly MISSING_NODE_OUTPUT: "MissingNodeOutput";
  readonly MISSING_STARTING_NODES: "MissingStartingNodes";
  readonly MULTIPLE_LOOP_CONTROLLER_NODES: "MultipleLoopControllerNodes";
  readonly MULTIPLE_LOOP_INPUT_NODES: "MultipleLoopInputNodes";
  readonly MULTIPLE_NODE_INPUT_CONNECTIONS: "MultipleNodeInputConnections";
  readonly UNFULFILLED_NODE_INPUT: "UnfulfilledNodeInput";
  readonly UNKNOWN_CONNECTION_CONDITION: "UnknownConnectionCondition";
  readonly UNKNOWN_CONNECTION_SOURCE: "UnknownConnectionSource";
  readonly UNKNOWN_CONNECTION_SOURCE_OUTPUT: "UnknownConnectionSourceOutput";
  readonly UNKNOWN_CONNECTION_TARGET: "UnknownConnectionTarget";
  readonly UNKNOWN_CONNECTION_TARGET_INPUT: "UnknownConnectionTargetInput";
  readonly UNKNOWN_NODE_INPUT: "UnknownNodeInput";
  readonly UNKNOWN_NODE_OUTPUT: "UnknownNodeOutput";
  readonly UNREACHABLE_NODE: "UnreachableNode";
  readonly UNSATISFIED_CONNECTION_CONDITIONS: "UnsatisfiedConnectionConditions";
  readonly UNSPECIFIED: "Unspecified";
};
export type FlowValidationType =
  (typeof FlowValidationType)[keyof typeof FlowValidationType];
export interface FlowValidation {
  message: string | undefined;
  severity: FlowValidationSeverity | undefined;
  details?: FlowValidationDetails | undefined;
  type?: FlowValidationType | undefined;
}
export interface ListFlowsRequest {
  maxResults?: number | undefined;
  nextToken?: string | undefined;
}
export interface FlowSummary {
  name: string | undefined;
  description?: string | undefined;
  id: string | undefined;
  arn: string | undefined;
  status: FlowStatus | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  version: string | undefined;
}
export interface ListFlowsResponse {
  flowSummaries: FlowSummary[] | undefined;
  nextToken?: string | undefined;
}
export interface PrepareFlowRequest {
  flowIdentifier: string | undefined;
}
export interface PrepareFlowResponse {
  id: string | undefined;
  status: FlowStatus | undefined;
}
export interface GetIngestionJobRequest {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  ingestionJobId: string | undefined;
}
export interface IngestionJobStatistics {
  numberOfDocumentsScanned?: number | undefined;
  numberOfMetadataDocumentsScanned?: number | undefined;
  numberOfNewDocumentsIndexed?: number | undefined;
  numberOfModifiedDocumentsIndexed?: number | undefined;
  numberOfMetadataDocumentsModified?: number | undefined;
  numberOfDocumentsDeleted?: number | undefined;
  numberOfDocumentsFailed?: number | undefined;
}
export declare const APISchemaFilterSensitiveLog: (obj: APISchema) => any;
export declare const CreateAgentActionGroupRequestFilterSensitiveLog: (
  obj: CreateAgentActionGroupRequest
) => any;
export declare const AgentActionGroupFilterSensitiveLog: (
  obj: AgentActionGroup
) => any;
export declare const CreateAgentActionGroupResponseFilterSensitiveLog: (
  obj: CreateAgentActionGroupResponse
) => any;
export declare const GetAgentActionGroupResponseFilterSensitiveLog: (
  obj: GetAgentActionGroupResponse
) => any;
export declare const UpdateAgentActionGroupRequestFilterSensitiveLog: (
  obj: UpdateAgentActionGroupRequest
) => any;
export declare const UpdateAgentActionGroupResponseFilterSensitiveLog: (
  obj: UpdateAgentActionGroupResponse
) => any;
export declare const PromptConfigurationFilterSensitiveLog: (
  obj: PromptConfiguration
) => any;
export declare const PromptOverrideConfigurationFilterSensitiveLog: (
  obj: PromptOverrideConfiguration
) => any;
export declare const AgentFilterSensitiveLog: (obj: Agent) => any;
export declare const AgentCollaboratorFilterSensitiveLog: (
  obj: AgentCollaborator
) => any;
export declare const AssociateAgentCollaboratorRequestFilterSensitiveLog: (
  obj: AssociateAgentCollaboratorRequest
) => any;
export declare const AssociateAgentCollaboratorResponseFilterSensitiveLog: (
  obj: AssociateAgentCollaboratorResponse
) => any;
export declare const GetAgentCollaboratorResponseFilterSensitiveLog: (
  obj: GetAgentCollaboratorResponse
) => any;
export declare const AgentCollaboratorSummaryFilterSensitiveLog: (
  obj: AgentCollaboratorSummary
) => any;
export declare const ListAgentCollaboratorsResponseFilterSensitiveLog: (
  obj: ListAgentCollaboratorsResponse
) => any;
export declare const UpdateAgentCollaboratorRequestFilterSensitiveLog: (
  obj: UpdateAgentCollaboratorRequest
) => any;
export declare const UpdateAgentCollaboratorResponseFilterSensitiveLog: (
  obj: UpdateAgentCollaboratorResponse
) => any;
export declare const CreateAgentRequestFilterSensitiveLog: (
  obj: CreateAgentRequest
) => any;
export declare const CreateAgentResponseFilterSensitiveLog: (
  obj: CreateAgentResponse
) => any;
export declare const GetAgentResponseFilterSensitiveLog: (
  obj: GetAgentResponse
) => any;
export declare const UpdateAgentRequestFilterSensitiveLog: (
  obj: UpdateAgentRequest
) => any;
export declare const UpdateAgentResponseFilterSensitiveLog: (
  obj: UpdateAgentResponse
) => any;
export declare const AgentVersionFilterSensitiveLog: (obj: AgentVersion) => any;
export declare const PatternObjectFilterFilterSensitiveLog: (
  obj: PatternObjectFilter
) => any;
export declare const PatternObjectFilterConfigurationFilterSensitiveLog: (
  obj: PatternObjectFilterConfiguration
) => any;
export declare const CrawlFilterConfigurationFilterSensitiveLog: (
  obj: CrawlFilterConfiguration
) => any;
export declare const ConfluenceCrawlerConfigurationFilterSensitiveLog: (
  obj: ConfluenceCrawlerConfiguration
) => any;
export declare const ConfluenceDataSourceConfigurationFilterSensitiveLog: (
  obj: ConfluenceDataSourceConfiguration
) => any;
export declare const S3DataSourceConfigurationFilterSensitiveLog: (
  obj: S3DataSourceConfiguration
) => any;
export declare const SalesforceCrawlerConfigurationFilterSensitiveLog: (
  obj: SalesforceCrawlerConfiguration
) => any;
export declare const SalesforceDataSourceConfigurationFilterSensitiveLog: (
  obj: SalesforceDataSourceConfiguration
) => any;
export declare const SharePointCrawlerConfigurationFilterSensitiveLog: (
  obj: SharePointCrawlerConfiguration
) => any;
export declare const SharePointDataSourceConfigurationFilterSensitiveLog: (
  obj: SharePointDataSourceConfiguration
) => any;
export declare const WebCrawlerConfigurationFilterSensitiveLog: (
  obj: WebCrawlerConfiguration
) => any;
export declare const WebDataSourceConfigurationFilterSensitiveLog: (
  obj: WebDataSourceConfiguration
) => any;
export declare const DataSourceConfigurationFilterSensitiveLog: (
  obj: DataSourceConfiguration
) => any;
export declare const CreateDataSourceRequestFilterSensitiveLog: (
  obj: CreateDataSourceRequest
) => any;
export declare const DataSourceFilterSensitiveLog: (obj: DataSource) => any;
export declare const CreateDataSourceResponseFilterSensitiveLog: (
  obj: CreateDataSourceResponse
) => any;
export declare const GetDataSourceResponseFilterSensitiveLog: (
  obj: GetDataSourceResponse
) => any;
export declare const UpdateDataSourceRequestFilterSensitiveLog: (
  obj: UpdateDataSourceRequest
) => any;
export declare const UpdateDataSourceResponseFilterSensitiveLog: (
  obj: UpdateDataSourceResponse
) => any;
export declare const FlowConditionFilterSensitiveLog: (
  obj: FlowCondition
) => any;
export declare const ConditionFlowNodeConfigurationFilterSensitiveLog: (
  obj: ConditionFlowNodeConfiguration
) => any;
export declare const InlineCodeFlowNodeConfigurationFilterSensitiveLog: (
  obj: InlineCodeFlowNodeConfiguration
) => any;
export declare const KnowledgeBasePromptTemplateFilterSensitiveLog: (
  obj: KnowledgeBasePromptTemplate
) => any;
export declare const KnowledgeBaseOrchestrationConfigurationFilterSensitiveLog: (
  obj: KnowledgeBaseOrchestrationConfiguration
) => any;
export declare const RerankingMetadataSelectiveModeConfigurationFilterSensitiveLog: (
  obj: RerankingMetadataSelectiveModeConfiguration
) => any;
export declare const MetadataConfigurationForRerankingFilterSensitiveLog: (
  obj: MetadataConfigurationForReranking
) => any;
export declare const VectorSearchBedrockRerankingConfigurationFilterSensitiveLog: (
  obj: VectorSearchBedrockRerankingConfiguration
) => any;
export declare const VectorSearchRerankingConfigurationFilterSensitiveLog: (
  obj: VectorSearchRerankingConfiguration
) => any;
export declare const KnowledgeBaseFlowNodeConfigurationFilterSensitiveLog: (
  obj: KnowledgeBaseFlowNodeConfiguration
) => any;
export declare const LoopControllerFlowNodeConfigurationFilterSensitiveLog: (
  obj: LoopControllerFlowNodeConfiguration
) => any;
export declare const ContentBlockFilterSensitiveLog: (obj: ContentBlock) => any;
export declare const MessageFilterSensitiveLog: (obj: Message) => any;
export declare const SystemContentBlockFilterSensitiveLog: (
  obj: SystemContentBlock
) => any;
export declare const ToolChoiceFilterSensitiveLog: (obj: ToolChoice) => any;
export declare const ToolConfigurationFilterSensitiveLog: (
  obj: ToolConfiguration
) => any;
export declare const ChatPromptTemplateConfigurationFilterSensitiveLog: (
  obj: ChatPromptTemplateConfiguration
) => any;
export declare const TextPromptTemplateConfigurationFilterSensitiveLog: (
  obj: TextPromptTemplateConfiguration
) => any;
export declare const PromptTemplateConfigurationFilterSensitiveLog: (
  obj: PromptTemplateConfiguration
) => any;
export declare const PromptFlowNodeInlineConfigurationFilterSensitiveLog: (
  obj: PromptFlowNodeInlineConfiguration
) => any;
export declare const PromptFlowNodeSourceConfigurationFilterSensitiveLog: (
  obj: PromptFlowNodeSourceConfiguration
) => any;
export declare const PromptFlowNodeConfigurationFilterSensitiveLog: (
  obj: PromptFlowNodeConfiguration
) => any;
export declare const FlowNodeInputFilterSensitiveLog: (
  obj: FlowNodeInput
) => any;
export declare const DuplicateConditionExpressionFlowValidationDetailsFilterSensitiveLog: (
  obj: DuplicateConditionExpressionFlowValidationDetails
) => any;
export declare const FlowValidationDetailsFilterSensitiveLog: (
  obj: FlowValidationDetails
) => any;
export declare const FlowValidationFilterSensitiveLog: (
  obj: FlowValidation
) => any;
