import { awsExpectUnion as __expectUnion, loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody, } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, limitedParseFloat32 as __limitedParseFloat32, map, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { BedrockAgentServiceException as __BaseException } from "../models/BedrockAgentServiceException";
import { AccessDeniedException, ConflictException, InternalServerException, PromptFlowNodeSourceConfiguration, PromptInferenceConfiguration, PromptTemplateConfiguration, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, Tool, ToolInputSchema, ValidationException, } from "../models/models_0";
import { FlowNodeConfiguration, } from "../models/models_1";
export const se_AssociateAgentCollaboratorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents/{agentId}/agentversions/{agentVersion}/agentcollaborators");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    let body;
    body = JSON.stringify(take(input, {
        agentDescriptor: (_) => _json(_),
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        collaborationInstruction: [],
        collaboratorName: [],
        relayConversationHistory: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_AssociateAgentKnowledgeBaseCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents/{agentId}/agentversions/{agentVersion}/knowledgebases");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    let body;
    body = JSON.stringify(take(input, {
        description: [],
        knowledgeBaseId: [],
        knowledgeBaseState: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateAgentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents");
    let body;
    body = JSON.stringify(take(input, {
        agentCollaboration: [],
        agentName: [],
        agentResourceRoleArn: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        customOrchestration: (_) => _json(_),
        customerEncryptionKeyArn: [],
        description: [],
        foundationModel: [],
        guardrailConfiguration: (_) => _json(_),
        idleSessionTTLInSeconds: [],
        instruction: [],
        memoryConfiguration: (_) => _json(_),
        orchestrationType: [],
        promptOverrideConfiguration: (_) => se_PromptOverrideConfiguration(_, context),
        tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateAgentActionGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents/{agentId}/agentversions/{agentVersion}/actiongroups");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    let body;
    body = JSON.stringify(take(input, {
        actionGroupExecutor: (_) => _json(_),
        actionGroupName: [],
        actionGroupState: [],
        apiSchema: (_) => _json(_),
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        functionSchema: (_) => _json(_),
        parentActionGroupSignature: [],
        parentActionGroupSignatureParams: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateAgentAliasCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents/{agentId}/agentaliases");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    let body;
    body = JSON.stringify(take(input, {
        agentAliasName: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        routingConfiguration: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateDataSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgebases/{knowledgeBaseId}/datasources");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        dataDeletionPolicy: [],
        dataSourceConfiguration: (_) => _json(_),
        description: [],
        name: [],
        serverSideEncryptionConfiguration: (_) => _json(_),
        vectorIngestionConfiguration: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateFlowCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/flows");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        customerEncryptionKeyArn: [],
        definition: (_) => se_FlowDefinition(_, context),
        description: [],
        executionRoleArn: [],
        name: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateFlowAliasCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/flows/{flowIdentifier}/aliases");
    b.p("flowIdentifier", () => input.flowIdentifier, "{flowIdentifier}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        concurrencyConfiguration: (_) => _json(_),
        description: [],
        name: [],
        routingConfiguration: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateFlowVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/flows/{flowIdentifier}/versions");
    b.p("flowIdentifier", () => input.flowIdentifier, "{flowIdentifier}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateKnowledgeBaseCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgebases");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        knowledgeBaseConfiguration: (_) => _json(_),
        name: [],
        roleArn: [],
        storageConfiguration: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreatePromptCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prompts");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        customerEncryptionKeyArn: [],
        defaultVariant: [],
        description: [],
        name: [],
        tags: (_) => _json(_),
        variants: (_) => se_PromptVariantList(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreatePromptVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prompts/{promptIdentifier}/versions");
    b.p("promptIdentifier", () => input.promptIdentifier, "{promptIdentifier}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteAgentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agents/{agentId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    const query = map({
        [_sRIUC]: [() => input.skipResourceInUseCheck !== void 0, () => input[_sRIUC].toString()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteAgentActionGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agents/{agentId}/agentversions/{agentVersion}/actiongroups/{actionGroupId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    b.p("actionGroupId", () => input.actionGroupId, "{actionGroupId}", false);
    const query = map({
        [_sRIUC]: [() => input.skipResourceInUseCheck !== void 0, () => input[_sRIUC].toString()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteAgentAliasCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agents/{agentId}/agentaliases/{agentAliasId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentAliasId", () => input.agentAliasId, "{agentAliasId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteAgentVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agents/{agentId}/agentversions/{agentVersion}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    const query = map({
        [_sRIUC]: [() => input.skipResourceInUseCheck !== void 0, () => input[_sRIUC].toString()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteDataSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteFlowCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/flows/{flowIdentifier}");
    b.p("flowIdentifier", () => input.flowIdentifier, "{flowIdentifier}", false);
    const query = map({
        [_sRIUC]: [() => input.skipResourceInUseCheck !== void 0, () => input[_sRIUC].toString()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteFlowAliasCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/flows/{flowIdentifier}/aliases/{aliasIdentifier}");
    b.p("flowIdentifier", () => input.flowIdentifier, "{flowIdentifier}", false);
    b.p("aliasIdentifier", () => input.aliasIdentifier, "{aliasIdentifier}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteFlowVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/flows/{flowIdentifier}/versions/{flowVersion}");
    b.p("flowIdentifier", () => input.flowIdentifier, "{flowIdentifier}", false);
    b.p("flowVersion", () => input.flowVersion, "{flowVersion}", false);
    const query = map({
        [_sRIUC]: [() => input.skipResourceInUseCheck !== void 0, () => input[_sRIUC].toString()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteKnowledgeBaseCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/knowledgebases/{knowledgeBaseId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteKnowledgeBaseDocumentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}/documents/deleteDocuments");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        documentIdentifiers: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeletePromptCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prompts/{promptIdentifier}");
    b.p("promptIdentifier", () => input.promptIdentifier, "{promptIdentifier}", false);
    const query = map({
        [_pV]: [, input[_pV]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DisassociateAgentCollaboratorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agents/{agentId}/agentversions/{agentVersion}/agentcollaborators/{collaboratorId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    b.p("collaboratorId", () => input.collaboratorId, "{collaboratorId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisassociateAgentKnowledgeBaseCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agents/{agentId}/agentversions/{agentVersion}/knowledgebases/{knowledgeBaseId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_GetAgentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agents/{agentId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetAgentActionGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agents/{agentId}/agentversions/{agentVersion}/actiongroups/{actionGroupId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    b.p("actionGroupId", () => input.actionGroupId, "{actionGroupId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetAgentAliasCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agents/{agentId}/agentaliases/{agentAliasId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentAliasId", () => input.agentAliasId, "{agentAliasId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetAgentCollaboratorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agents/{agentId}/agentversions/{agentVersion}/agentcollaborators/{collaboratorId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    b.p("collaboratorId", () => input.collaboratorId, "{collaboratorId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetAgentKnowledgeBaseCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agents/{agentId}/agentversions/{agentVersion}/knowledgebases/{knowledgeBaseId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetAgentVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agents/{agentId}/agentversions/{agentVersion}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetDataSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetFlowCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/flows/{flowIdentifier}");
    b.p("flowIdentifier", () => input.flowIdentifier, "{flowIdentifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetFlowAliasCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/flows/{flowIdentifier}/aliases/{aliasIdentifier}");
    b.p("flowIdentifier", () => input.flowIdentifier, "{flowIdentifier}", false);
    b.p("aliasIdentifier", () => input.aliasIdentifier, "{aliasIdentifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetFlowVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/flows/{flowIdentifier}/versions/{flowVersion}");
    b.p("flowIdentifier", () => input.flowIdentifier, "{flowIdentifier}", false);
    b.p("flowVersion", () => input.flowVersion, "{flowVersion}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetIngestionJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}/ingestionjobs/{ingestionJobId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
    b.p("ingestionJobId", () => input.ingestionJobId, "{ingestionJobId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetKnowledgeBaseCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/knowledgebases/{knowledgeBaseId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetKnowledgeBaseDocumentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}/documents/getDocuments");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        documentIdentifiers: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetPromptCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prompts/{promptIdentifier}");
    b.p("promptIdentifier", () => input.promptIdentifier, "{promptIdentifier}", false);
    const query = map({
        [_pV]: [, input[_pV]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_IngestKnowledgeBaseDocumentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}/documents");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        documents: (_) => se_KnowledgeBaseDocuments(_, context),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_ListAgentActionGroupsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents/{agentId}/agentversions/{agentVersion}/actiongroups");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAgentAliasesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents/{agentId}/agentaliases");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAgentCollaboratorsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents/{agentId}/agentversions/{agentVersion}/agentcollaborators");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAgentKnowledgeBasesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents/{agentId}/agentversions/{agentVersion}/knowledgebases");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAgentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAgentVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents/{agentId}/agentversions");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListDataSourcesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgebases/{knowledgeBaseId}/datasources");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListFlowAliasesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/flows/{flowIdentifier}/aliases");
    b.p("flowIdentifier", () => input.flowIdentifier, "{flowIdentifier}", false);
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListFlowsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/flows");
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListFlowVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/flows/{flowIdentifier}/versions");
    b.p("flowIdentifier", () => input.flowIdentifier, "{flowIdentifier}", false);
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListIngestionJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}/ingestionjobs");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
        sortBy: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListKnowledgeBaseDocumentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}/documents");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListKnowledgeBasesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgebases");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListPromptsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prompts");
    const query = map({
        [_pI]: [, input[_pI]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_PrepareAgentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agents/{agentId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_PrepareFlowCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/flows/{flowIdentifier}");
    b.p("flowIdentifier", () => input.flowIdentifier, "{flowIdentifier}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartIngestionJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}/ingestionjobs");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StopIngestionJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}/ingestionjobs/{ingestionJobId}/stop");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
    b.p("ingestionJobId", () => input.ingestionJobId, "{ingestionJobId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [__expectNonNull(input.tagKeys, `tagKeys`) != null, () => input[_tK] || []],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateAgentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents/{agentId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    let body;
    body = JSON.stringify(take(input, {
        agentCollaboration: [],
        agentName: [],
        agentResourceRoleArn: [],
        customOrchestration: (_) => _json(_),
        customerEncryptionKeyArn: [],
        description: [],
        foundationModel: [],
        guardrailConfiguration: (_) => _json(_),
        idleSessionTTLInSeconds: [],
        instruction: [],
        memoryConfiguration: (_) => _json(_),
        orchestrationType: [],
        promptOverrideConfiguration: (_) => se_PromptOverrideConfiguration(_, context),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateAgentActionGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents/{agentId}/agentversions/{agentVersion}/actiongroups/{actionGroupId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    b.p("actionGroupId", () => input.actionGroupId, "{actionGroupId}", false);
    let body;
    body = JSON.stringify(take(input, {
        actionGroupExecutor: (_) => _json(_),
        actionGroupName: [],
        actionGroupState: [],
        apiSchema: (_) => _json(_),
        description: [],
        functionSchema: (_) => _json(_),
        parentActionGroupSignature: [],
        parentActionGroupSignatureParams: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateAgentAliasCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents/{agentId}/agentaliases/{agentAliasId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentAliasId", () => input.agentAliasId, "{agentAliasId}", false);
    let body;
    body = JSON.stringify(take(input, {
        agentAliasName: [],
        aliasInvocationState: [],
        description: [],
        routingConfiguration: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateAgentCollaboratorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents/{agentId}/agentversions/{agentVersion}/agentcollaborators/{collaboratorId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    b.p("collaboratorId", () => input.collaboratorId, "{collaboratorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        agentDescriptor: (_) => _json(_),
        collaborationInstruction: [],
        collaboratorName: [],
        relayConversationHistory: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateAgentKnowledgeBaseCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents/{agentId}/agentversions/{agentVersion}/knowledgebases/{knowledgeBaseId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentVersion", () => input.agentVersion, "{agentVersion}", false);
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    body = JSON.stringify(take(input, {
        description: [],
        knowledgeBaseState: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateDataSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        dataDeletionPolicy: [],
        dataSourceConfiguration: (_) => _json(_),
        description: [],
        name: [],
        serverSideEncryptionConfiguration: (_) => _json(_),
        vectorIngestionConfiguration: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateFlowCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/flows/{flowIdentifier}");
    b.p("flowIdentifier", () => input.flowIdentifier, "{flowIdentifier}", false);
    let body;
    body = JSON.stringify(take(input, {
        customerEncryptionKeyArn: [],
        definition: (_) => se_FlowDefinition(_, context),
        description: [],
        executionRoleArn: [],
        name: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateFlowAliasCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/flows/{flowIdentifier}/aliases/{aliasIdentifier}");
    b.p("flowIdentifier", () => input.flowIdentifier, "{flowIdentifier}", false);
    b.p("aliasIdentifier", () => input.aliasIdentifier, "{aliasIdentifier}", false);
    let body;
    body = JSON.stringify(take(input, {
        concurrencyConfiguration: (_) => _json(_),
        description: [],
        name: [],
        routingConfiguration: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateKnowledgeBaseCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgebases/{knowledgeBaseId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    body = JSON.stringify(take(input, {
        description: [],
        knowledgeBaseConfiguration: (_) => _json(_),
        name: [],
        roleArn: [],
        storageConfiguration: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdatePromptCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prompts/{promptIdentifier}");
    b.p("promptIdentifier", () => input.promptIdentifier, "{promptIdentifier}", false);
    let body;
    body = JSON.stringify(take(input, {
        customerEncryptionKeyArn: [],
        defaultVariant: [],
        description: [],
        name: [],
        variants: (_) => se_PromptVariantList(_, context),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_ValidateFlowDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/flows/validate-definition");
    let body;
    body = JSON.stringify(take(input, {
        definition: (_) => se_FlowDefinition(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_AssociateAgentCollaboratorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentCollaborator: (_) => de_AgentCollaborator(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_AssociateAgentKnowledgeBaseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentKnowledgeBase: (_) => de_AgentKnowledgeBase(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateAgentCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agent: (_) => de_Agent(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateAgentActionGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentActionGroup: (_) => de_AgentActionGroup(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateAgentAliasCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentAlias: (_) => de_AgentAlias(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateDataSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        dataSource: (_) => de_DataSource(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateFlowCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        customerEncryptionKeyArn: __expectString,
        definition: (_) => de_FlowDefinition(_, context),
        description: __expectString,
        executionRoleArn: __expectString,
        id: __expectString,
        name: __expectString,
        status: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateFlowAliasCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        concurrencyConfiguration: _json,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        flowId: __expectString,
        id: __expectString,
        name: __expectString,
        routingConfiguration: _json,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateFlowVersionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        customerEncryptionKeyArn: __expectString,
        definition: (_) => de_FlowDefinition(_, context),
        description: __expectString,
        executionRoleArn: __expectString,
        id: __expectString,
        name: __expectString,
        status: __expectString,
        version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateKnowledgeBaseCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        knowledgeBase: (_) => de_KnowledgeBase(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreatePromptCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        customerEncryptionKeyArn: __expectString,
        defaultVariant: __expectString,
        description: __expectString,
        id: __expectString,
        name: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        variants: (_) => de_PromptVariantList(_, context),
        version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreatePromptVersionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        customerEncryptionKeyArn: __expectString,
        defaultVariant: __expectString,
        description: __expectString,
        id: __expectString,
        name: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        variants: (_) => de_PromptVariantList(_, context),
        version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteAgentCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentId: __expectString,
        agentStatus: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteAgentActionGroupCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteAgentAliasCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentAliasId: __expectString,
        agentAliasStatus: __expectString,
        agentId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteAgentVersionCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentId: __expectString,
        agentStatus: __expectString,
        agentVersion: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteDataSourceCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        dataSourceId: __expectString,
        knowledgeBaseId: __expectString,
        status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteFlowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        id: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteFlowAliasCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        flowId: __expectString,
        id: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteFlowVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        id: __expectString,
        version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteKnowledgeBaseCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        knowledgeBaseId: __expectString,
        status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteKnowledgeBaseDocumentsCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        documentDetails: (_) => de_KnowledgeBaseDocumentDetails(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeletePromptCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        id: __expectString,
        version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisassociateAgentCollaboratorCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateAgentKnowledgeBaseCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetAgentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agent: (_) => de_Agent(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAgentActionGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentActionGroup: (_) => de_AgentActionGroup(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAgentAliasCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentAlias: (_) => de_AgentAlias(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAgentCollaboratorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentCollaborator: (_) => de_AgentCollaborator(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAgentKnowledgeBaseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentKnowledgeBase: (_) => de_AgentKnowledgeBase(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAgentVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentVersion: (_) => de_AgentVersion(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDataSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        dataSource: (_) => de_DataSource(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetFlowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        customerEncryptionKeyArn: __expectString,
        definition: (_) => de_FlowDefinition(_, context),
        description: __expectString,
        executionRoleArn: __expectString,
        id: __expectString,
        name: __expectString,
        status: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        validations: _json,
        version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetFlowAliasCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        concurrencyConfiguration: _json,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        flowId: __expectString,
        id: __expectString,
        name: __expectString,
        routingConfiguration: _json,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetFlowVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        customerEncryptionKeyArn: __expectString,
        definition: (_) => de_FlowDefinition(_, context),
        description: __expectString,
        executionRoleArn: __expectString,
        id: __expectString,
        name: __expectString,
        status: __expectString,
        version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetIngestionJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ingestionJob: (_) => de_IngestionJob(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetKnowledgeBaseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        knowledgeBase: (_) => de_KnowledgeBase(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetKnowledgeBaseDocumentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        documentDetails: (_) => de_KnowledgeBaseDocumentDetails(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetPromptCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        customerEncryptionKeyArn: __expectString,
        defaultVariant: __expectString,
        description: __expectString,
        id: __expectString,
        name: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        variants: (_) => de_PromptVariantList(_, context),
        version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_IngestKnowledgeBaseDocumentsCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        documentDetails: (_) => de_KnowledgeBaseDocumentDetails(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAgentActionGroupsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        actionGroupSummaries: (_) => de_ActionGroupSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAgentAliasesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentAliasSummaries: (_) => de_AgentAliasSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAgentCollaboratorsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentCollaboratorSummaries: (_) => de_AgentCollaboratorSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAgentKnowledgeBasesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentKnowledgeBaseSummaries: (_) => de_AgentKnowledgeBaseSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAgentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentSummaries: (_) => de_AgentSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAgentVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentVersionSummaries: (_) => de_AgentVersionSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDataSourcesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        dataSourceSummaries: (_) => de_DataSourceSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListFlowAliasesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        flowAliasSummaries: (_) => de_FlowAliasSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListFlowsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        flowSummaries: (_) => de_FlowSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListFlowVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        flowVersionSummaries: (_) => de_FlowVersionSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListIngestionJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ingestionJobSummaries: (_) => de_IngestionJobSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListKnowledgeBaseDocumentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        documentDetails: (_) => de_KnowledgeBaseDocumentDetails(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListKnowledgeBasesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        knowledgeBaseSummaries: (_) => de_KnowledgeBaseSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPromptsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        promptSummaries: (_) => de_PromptSummaries(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PrepareAgentCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentId: __expectString,
        agentStatus: __expectString,
        agentVersion: __expectString,
        preparedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PrepareFlowCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        id: __expectString,
        status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartIngestionJobCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ingestionJob: (_) => de_IngestionJob(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StopIngestionJobCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ingestionJob: (_) => de_IngestionJob(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateAgentCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agent: (_) => de_Agent(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateAgentActionGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentActionGroup: (_) => de_AgentActionGroup(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateAgentAliasCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentAlias: (_) => de_AgentAlias(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateAgentCollaboratorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentCollaborator: (_) => de_AgentCollaborator(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateAgentKnowledgeBaseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentKnowledgeBase: (_) => de_AgentKnowledgeBase(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateDataSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        dataSource: (_) => de_DataSource(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateFlowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        customerEncryptionKeyArn: __expectString,
        definition: (_) => de_FlowDefinition(_, context),
        description: __expectString,
        executionRoleArn: __expectString,
        id: __expectString,
        name: __expectString,
        status: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateFlowAliasCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        concurrencyConfiguration: _json,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        flowId: __expectString,
        id: __expectString,
        name: __expectString,
        routingConfiguration: _json,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateKnowledgeBaseCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        knowledgeBase: (_) => de_KnowledgeBase(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdatePromptCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        customerEncryptionKeyArn: __expectString,
        defaultVariant: __expectString,
        description: __expectString,
        id: __expectString,
        name: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        variants: (_) => de_PromptVariantList(_, context),
        version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ValidateFlowDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        validations: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.bedrockagent#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.bedrockagent#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.bedrockagent#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.bedrockagent#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.bedrockagent#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.bedrockagent#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.bedrockagent#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        fieldList: _json,
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_AdditionalModelRequestFields = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_AdditionalModelRequestFieldsValue(value, context);
        return acc;
    }, {});
};
const se_AdditionalModelRequestFieldsValue = (input, context) => {
    return input;
};
const se_ByteContentDoc = (input, context) => {
    return take(input, {
        data: context.base64Encoder,
        mimeType: [],
    });
};
const se_ChatPromptTemplateConfiguration = (input, context) => {
    return take(input, {
        inputVariables: _json,
        messages: _json,
        system: _json,
        toolConfiguration: (_) => se_ToolConfiguration(_, context),
    });
};
const se_CustomContent = (input, context) => {
    return take(input, {
        customDocumentIdentifier: _json,
        inlineContent: (_) => se_InlineContent(_, context),
        s3Location: _json,
        sourceType: [],
    });
};
const se_DocumentContent = (input, context) => {
    return take(input, {
        custom: (_) => se_CustomContent(_, context),
        dataSourceType: [],
        s3: _json,
    });
};
const se_DocumentMetadata = (input, context) => {
    return take(input, {
        inlineAttributes: (_) => se_MetadataAttributes(_, context),
        s3Location: _json,
        type: [],
    });
};
const se_FlowDefinition = (input, context) => {
    return take(input, {
        connections: _json,
        nodes: (_) => se_FlowNodes(_, context),
    });
};
const se_FlowNode = (input, context) => {
    return take(input, {
        configuration: (_) => se_FlowNodeConfiguration(_, context),
        inputs: _json,
        name: [],
        outputs: _json,
        type: [],
    });
};
const se_FlowNodeConfiguration = (input, context) => {
    return FlowNodeConfiguration.visit(input, {
        agent: (value) => ({ agent: _json(value) }),
        collector: (value) => ({ collector: _json(value) }),
        condition: (value) => ({ condition: _json(value) }),
        inlineCode: (value) => ({ inlineCode: _json(value) }),
        input: (value) => ({ input: _json(value) }),
        iterator: (value) => ({ iterator: _json(value) }),
        knowledgeBase: (value) => ({ knowledgeBase: se_KnowledgeBaseFlowNodeConfiguration(value, context) }),
        lambdaFunction: (value) => ({ lambdaFunction: _json(value) }),
        lex: (value) => ({ lex: _json(value) }),
        loop: (value) => ({ loop: se_LoopFlowNodeConfiguration(value, context) }),
        loopController: (value) => ({ loopController: _json(value) }),
        loopInput: (value) => ({ loopInput: _json(value) }),
        output: (value) => ({ output: _json(value) }),
        prompt: (value) => ({ prompt: se_PromptFlowNodeConfiguration(value, context) }),
        retrieval: (value) => ({ retrieval: _json(value) }),
        storage: (value) => ({ storage: _json(value) }),
        _: (name, value) => ({ [name]: value }),
    });
};
const se_FlowNodes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_FlowNode(entry, context);
    });
};
const se_InferenceConfiguration = (input, context) => {
    return take(input, {
        maximumLength: [],
        stopSequences: _json,
        temperature: __serializeFloat,
        topK: [],
        topP: __serializeFloat,
    });
};
const se_InlineContent = (input, context) => {
    return take(input, {
        byteContent: (_) => se_ByteContentDoc(_, context),
        textContent: _json,
        type: [],
    });
};
const se_KnowledgeBaseDocument = (input, context) => {
    return take(input, {
        content: (_) => se_DocumentContent(_, context),
        metadata: (_) => se_DocumentMetadata(_, context),
    });
};
const se_KnowledgeBaseDocuments = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_KnowledgeBaseDocument(entry, context);
    });
};
const se_KnowledgeBaseFlowNodeConfiguration = (input, context) => {
    return take(input, {
        guardrailConfiguration: _json,
        inferenceConfiguration: (_) => se_PromptInferenceConfiguration(_, context),
        knowledgeBaseId: [],
        modelId: [],
        numberOfResults: [],
        orchestrationConfiguration: (_) => se_KnowledgeBaseOrchestrationConfiguration(_, context),
        promptTemplate: _json,
        rerankingConfiguration: (_) => se_VectorSearchRerankingConfiguration(_, context),
    });
};
const se_KnowledgeBaseOrchestrationConfiguration = (input, context) => {
    return take(input, {
        additionalModelRequestFields: (_) => se_AdditionalModelRequestFields(_, context),
        inferenceConfig: (_) => se_PromptInferenceConfiguration(_, context),
        performanceConfig: _json,
        promptTemplate: _json,
    });
};
const se_LoopFlowNodeConfiguration = (input, context) => {
    return take(input, {
        definition: (_) => se_FlowDefinition(_, context),
    });
};
const se_MetadataAttribute = (input, context) => {
    return take(input, {
        key: [],
        value: (_) => se_MetadataAttributeValue(_, context),
    });
};
const se_MetadataAttributes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_MetadataAttribute(entry, context);
    });
};
const se_MetadataAttributeValue = (input, context) => {
    return take(input, {
        booleanValue: [],
        numberValue: __serializeFloat,
        stringListValue: _json,
        stringValue: [],
        type: [],
    });
};
const se_PromptConfiguration = (input, context) => {
    return take(input, {
        additionalModelRequestFields: (_) => se_Document(_, context),
        basePromptTemplate: [],
        foundationModel: [],
        inferenceConfiguration: (_) => se_InferenceConfiguration(_, context),
        parserMode: [],
        promptCreationMode: [],
        promptState: [],
        promptType: [],
    });
};
const se_PromptConfigurations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_PromptConfiguration(entry, context);
    });
};
const se_PromptFlowNodeConfiguration = (input, context) => {
    return take(input, {
        guardrailConfiguration: _json,
        sourceConfiguration: (_) => se_PromptFlowNodeSourceConfiguration(_, context),
    });
};
const se_PromptFlowNodeInlineConfiguration = (input, context) => {
    return take(input, {
        additionalModelRequestFields: (_) => se_Document(_, context),
        inferenceConfiguration: (_) => se_PromptInferenceConfiguration(_, context),
        modelId: [],
        templateConfiguration: (_) => se_PromptTemplateConfiguration(_, context),
        templateType: [],
    });
};
const se_PromptFlowNodeSourceConfiguration = (input, context) => {
    return PromptFlowNodeSourceConfiguration.visit(input, {
        inline: (value) => ({ inline: se_PromptFlowNodeInlineConfiguration(value, context) }),
        resource: (value) => ({ resource: _json(value) }),
        _: (name, value) => ({ [name]: value }),
    });
};
const se_PromptInferenceConfiguration = (input, context) => {
    return PromptInferenceConfiguration.visit(input, {
        text: (value) => ({ text: se_PromptModelInferenceConfiguration(value, context) }),
        _: (name, value) => ({ [name]: value }),
    });
};
const se_PromptModelInferenceConfiguration = (input, context) => {
    return take(input, {
        maxTokens: [],
        stopSequences: _json,
        temperature: __serializeFloat,
        topP: __serializeFloat,
    });
};
const se_PromptOverrideConfiguration = (input, context) => {
    return take(input, {
        overrideLambda: [],
        promptConfigurations: (_) => se_PromptConfigurations(_, context),
    });
};
const se_PromptTemplateConfiguration = (input, context) => {
    return PromptTemplateConfiguration.visit(input, {
        chat: (value) => ({ chat: se_ChatPromptTemplateConfiguration(value, context) }),
        text: (value) => ({ text: _json(value) }),
        _: (name, value) => ({ [name]: value }),
    });
};
const se_PromptVariant = (input, context) => {
    return take(input, {
        additionalModelRequestFields: (_) => se_Document(_, context),
        genAiResource: _json,
        inferenceConfiguration: (_) => se_PromptInferenceConfiguration(_, context),
        metadata: _json,
        modelId: [],
        name: [],
        templateConfiguration: (_) => se_PromptTemplateConfiguration(_, context),
        templateType: [],
    });
};
const se_PromptVariantList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_PromptVariant(entry, context);
    });
};
const se_Tool = (input, context) => {
    return Tool.visit(input, {
        cachePoint: (value) => ({ cachePoint: _json(value) }),
        toolSpec: (value) => ({ toolSpec: se_ToolSpecification(value, context) }),
        _: (name, value) => ({ [name]: value }),
    });
};
const se_ToolConfiguration = (input, context) => {
    return take(input, {
        toolChoice: _json,
        tools: (_) => se_Tools(_, context),
    });
};
const se_ToolInputSchema = (input, context) => {
    return ToolInputSchema.visit(input, {
        json: (value) => ({ json: se_Document(value, context) }),
        _: (name, value) => ({ [name]: value }),
    });
};
const se_Tools = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Tool(entry, context);
    });
};
const se_ToolSpecification = (input, context) => {
    return take(input, {
        description: [],
        inputSchema: (_) => se_ToolInputSchema(_, context),
        name: [],
    });
};
const se_VectorSearchBedrockRerankingConfiguration = (input, context) => {
    return take(input, {
        metadataConfiguration: _json,
        modelConfiguration: (_) => se_VectorSearchBedrockRerankingModelConfiguration(_, context),
        numberOfRerankedResults: [],
    });
};
const se_VectorSearchBedrockRerankingModelConfiguration = (input, context) => {
    return take(input, {
        additionalModelRequestFields: (_) => se_AdditionalModelRequestFields(_, context),
        modelArn: [],
    });
};
const se_VectorSearchRerankingConfiguration = (input, context) => {
    return take(input, {
        bedrockRerankingConfiguration: (_) => se_VectorSearchBedrockRerankingConfiguration(_, context),
        type: [],
    });
};
const se_Document = (input, context) => {
    return input;
};
const de_ActionGroupSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ActionGroupSummary(entry, context);
    });
    return retVal;
};
const de_ActionGroupSummary = (output, context) => {
    return take(output, {
        actionGroupId: __expectString,
        actionGroupName: __expectString,
        actionGroupState: __expectString,
        description: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_AdditionalModelRequestFields = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_AdditionalModelRequestFieldsValue(value, context);
        return acc;
    }, {});
};
const de_AdditionalModelRequestFieldsValue = (output, context) => {
    return output;
};
const de_Agent = (output, context) => {
    return take(output, {
        agentArn: __expectString,
        agentCollaboration: __expectString,
        agentId: __expectString,
        agentName: __expectString,
        agentResourceRoleArn: __expectString,
        agentStatus: __expectString,
        agentVersion: __expectString,
        clientToken: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        customOrchestration: _json,
        customerEncryptionKeyArn: __expectString,
        description: __expectString,
        failureReasons: _json,
        foundationModel: __expectString,
        guardrailConfiguration: _json,
        idleSessionTTLInSeconds: __expectInt32,
        instruction: __expectString,
        memoryConfiguration: _json,
        orchestrationType: __expectString,
        preparedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        promptOverrideConfiguration: (_) => de_PromptOverrideConfiguration(_, context),
        recommendedActions: _json,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_AgentActionGroup = (output, context) => {
    return take(output, {
        actionGroupExecutor: (_) => _json(__expectUnion(_)),
        actionGroupId: __expectString,
        actionGroupName: __expectString,
        actionGroupState: __expectString,
        agentId: __expectString,
        agentVersion: __expectString,
        apiSchema: (_) => _json(__expectUnion(_)),
        clientToken: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        functionSchema: (_) => _json(__expectUnion(_)),
        parentActionGroupSignatureParams: _json,
        parentActionSignature: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_AgentAlias = (output, context) => {
    return take(output, {
        agentAliasArn: __expectString,
        agentAliasHistoryEvents: (_) => de_AgentAliasHistoryEvents(_, context),
        agentAliasId: __expectString,
        agentAliasName: __expectString,
        agentAliasStatus: __expectString,
        agentId: __expectString,
        aliasInvocationState: __expectString,
        clientToken: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        failureReasons: _json,
        routingConfiguration: _json,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_AgentAliasHistoryEvent = (output, context) => {
    return take(output, {
        endDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        routingConfiguration: _json,
        startDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_AgentAliasHistoryEvents = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AgentAliasHistoryEvent(entry, context);
    });
    return retVal;
};
const de_AgentAliasSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AgentAliasSummary(entry, context);
    });
    return retVal;
};
const de_AgentAliasSummary = (output, context) => {
    return take(output, {
        agentAliasId: __expectString,
        agentAliasName: __expectString,
        agentAliasStatus: __expectString,
        aliasInvocationState: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        routingConfiguration: _json,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_AgentCollaborator = (output, context) => {
    return take(output, {
        agentDescriptor: _json,
        agentId: __expectString,
        agentVersion: __expectString,
        clientToken: __expectString,
        collaborationInstruction: __expectString,
        collaboratorId: __expectString,
        collaboratorName: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        lastUpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        relayConversationHistory: __expectString,
    });
};
const de_AgentCollaboratorSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AgentCollaboratorSummary(entry, context);
    });
    return retVal;
};
const de_AgentCollaboratorSummary = (output, context) => {
    return take(output, {
        agentDescriptor: _json,
        agentId: __expectString,
        agentVersion: __expectString,
        collaborationInstruction: __expectString,
        collaboratorId: __expectString,
        collaboratorName: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        lastUpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        relayConversationHistory: __expectString,
    });
};
const de_AgentKnowledgeBase = (output, context) => {
    return take(output, {
        agentId: __expectString,
        agentVersion: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        knowledgeBaseId: __expectString,
        knowledgeBaseState: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_AgentKnowledgeBaseSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AgentKnowledgeBaseSummary(entry, context);
    });
    return retVal;
};
const de_AgentKnowledgeBaseSummary = (output, context) => {
    return take(output, {
        description: __expectString,
        knowledgeBaseId: __expectString,
        knowledgeBaseState: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_AgentSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AgentSummary(entry, context);
    });
    return retVal;
};
const de_AgentSummary = (output, context) => {
    return take(output, {
        agentId: __expectString,
        agentName: __expectString,
        agentStatus: __expectString,
        description: __expectString,
        guardrailConfiguration: _json,
        latestAgentVersion: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_AgentVersion = (output, context) => {
    return take(output, {
        agentArn: __expectString,
        agentCollaboration: __expectString,
        agentId: __expectString,
        agentName: __expectString,
        agentResourceRoleArn: __expectString,
        agentStatus: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        customerEncryptionKeyArn: __expectString,
        description: __expectString,
        failureReasons: _json,
        foundationModel: __expectString,
        guardrailConfiguration: _json,
        idleSessionTTLInSeconds: __expectInt32,
        instruction: __expectString,
        memoryConfiguration: _json,
        promptOverrideConfiguration: (_) => de_PromptOverrideConfiguration(_, context),
        recommendedActions: _json,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        version: __expectString,
    });
};
const de_AgentVersionSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AgentVersionSummary(entry, context);
    });
    return retVal;
};
const de_AgentVersionSummary = (output, context) => {
    return take(output, {
        agentName: __expectString,
        agentStatus: __expectString,
        agentVersion: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        guardrailConfiguration: _json,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_ChatPromptTemplateConfiguration = (output, context) => {
    return take(output, {
        inputVariables: _json,
        messages: _json,
        system: _json,
        toolConfiguration: (_) => de_ToolConfiguration(_, context),
    });
};
const de_DataSource = (output, context) => {
    return take(output, {
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        dataDeletionPolicy: __expectString,
        dataSourceConfiguration: _json,
        dataSourceId: __expectString,
        description: __expectString,
        failureReasons: _json,
        knowledgeBaseId: __expectString,
        name: __expectString,
        serverSideEncryptionConfiguration: _json,
        status: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        vectorIngestionConfiguration: _json,
    });
};
const de_DataSourceSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataSourceSummary(entry, context);
    });
    return retVal;
};
const de_DataSourceSummary = (output, context) => {
    return take(output, {
        dataSourceId: __expectString,
        description: __expectString,
        knowledgeBaseId: __expectString,
        name: __expectString,
        status: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_FlowAliasSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FlowAliasSummary(entry, context);
    });
    return retVal;
};
const de_FlowAliasSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        concurrencyConfiguration: _json,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        flowId: __expectString,
        id: __expectString,
        name: __expectString,
        routingConfiguration: _json,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_FlowDefinition = (output, context) => {
    return take(output, {
        connections: _json,
        nodes: (_) => de_FlowNodes(_, context),
    });
};
const de_FlowNode = (output, context) => {
    return take(output, {
        configuration: (_) => de_FlowNodeConfiguration(__expectUnion(_), context),
        inputs: _json,
        name: __expectString,
        outputs: _json,
        type: __expectString,
    });
};
const de_FlowNodeConfiguration = (output, context) => {
    if (output.agent != null) {
        return {
            agent: _json(output.agent),
        };
    }
    if (output.collector != null) {
        return {
            collector: _json(output.collector),
        };
    }
    if (output.condition != null) {
        return {
            condition: _json(output.condition),
        };
    }
    if (output.inlineCode != null) {
        return {
            inlineCode: _json(output.inlineCode),
        };
    }
    if (output.input != null) {
        return {
            input: _json(output.input),
        };
    }
    if (output.iterator != null) {
        return {
            iterator: _json(output.iterator),
        };
    }
    if (output.knowledgeBase != null) {
        return {
            knowledgeBase: de_KnowledgeBaseFlowNodeConfiguration(output.knowledgeBase, context),
        };
    }
    if (output.lambdaFunction != null) {
        return {
            lambdaFunction: _json(output.lambdaFunction),
        };
    }
    if (output.lex != null) {
        return {
            lex: _json(output.lex),
        };
    }
    if (output.loop != null) {
        return {
            loop: de_LoopFlowNodeConfiguration(output.loop, context),
        };
    }
    if (output.loopController != null) {
        return {
            loopController: _json(output.loopController),
        };
    }
    if (output.loopInput != null) {
        return {
            loopInput: _json(output.loopInput),
        };
    }
    if (output.output != null) {
        return {
            output: _json(output.output),
        };
    }
    if (output.prompt != null) {
        return {
            prompt: de_PromptFlowNodeConfiguration(output.prompt, context),
        };
    }
    if (output.retrieval != null) {
        return {
            retrieval: _json(output.retrieval),
        };
    }
    if (output.storage != null) {
        return {
            storage: _json(output.storage),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_FlowNodes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FlowNode(entry, context);
    });
    return retVal;
};
const de_FlowSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FlowSummary(entry, context);
    });
    return retVal;
};
const de_FlowSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        id: __expectString,
        name: __expectString,
        status: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        version: __expectString,
    });
};
const de_FlowVersionSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FlowVersionSummary(entry, context);
    });
    return retVal;
};
const de_FlowVersionSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        id: __expectString,
        status: __expectString,
        version: __expectString,
    });
};
const de_InferenceConfiguration = (output, context) => {
    return take(output, {
        maximumLength: __expectInt32,
        stopSequences: _json,
        temperature: __limitedParseFloat32,
        topK: __expectInt32,
        topP: __limitedParseFloat32,
    });
};
const de_IngestionJob = (output, context) => {
    return take(output, {
        dataSourceId: __expectString,
        description: __expectString,
        failureReasons: _json,
        ingestionJobId: __expectString,
        knowledgeBaseId: __expectString,
        startedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        statistics: _json,
        status: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_IngestionJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IngestionJobSummary(entry, context);
    });
    return retVal;
};
const de_IngestionJobSummary = (output, context) => {
    return take(output, {
        dataSourceId: __expectString,
        description: __expectString,
        ingestionJobId: __expectString,
        knowledgeBaseId: __expectString,
        startedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        statistics: _json,
        status: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_KnowledgeBase = (output, context) => {
    return take(output, {
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        failureReasons: _json,
        knowledgeBaseArn: __expectString,
        knowledgeBaseConfiguration: _json,
        knowledgeBaseId: __expectString,
        name: __expectString,
        roleArn: __expectString,
        status: __expectString,
        storageConfiguration: _json,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_KnowledgeBaseDocumentDetail = (output, context) => {
    return take(output, {
        dataSourceId: __expectString,
        identifier: _json,
        knowledgeBaseId: __expectString,
        status: __expectString,
        statusReason: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_KnowledgeBaseDocumentDetails = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_KnowledgeBaseDocumentDetail(entry, context);
    });
    return retVal;
};
const de_KnowledgeBaseFlowNodeConfiguration = (output, context) => {
    return take(output, {
        guardrailConfiguration: _json,
        inferenceConfiguration: (_) => de_PromptInferenceConfiguration(__expectUnion(_), context),
        knowledgeBaseId: __expectString,
        modelId: __expectString,
        numberOfResults: __expectInt32,
        orchestrationConfiguration: (_) => de_KnowledgeBaseOrchestrationConfiguration(_, context),
        promptTemplate: _json,
        rerankingConfiguration: (_) => de_VectorSearchRerankingConfiguration(_, context),
    });
};
const de_KnowledgeBaseOrchestrationConfiguration = (output, context) => {
    return take(output, {
        additionalModelRequestFields: (_) => de_AdditionalModelRequestFields(_, context),
        inferenceConfig: (_) => de_PromptInferenceConfiguration(__expectUnion(_), context),
        performanceConfig: _json,
        promptTemplate: _json,
    });
};
const de_KnowledgeBaseSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_KnowledgeBaseSummary(entry, context);
    });
    return retVal;
};
const de_KnowledgeBaseSummary = (output, context) => {
    return take(output, {
        description: __expectString,
        knowledgeBaseId: __expectString,
        name: __expectString,
        status: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_LoopFlowNodeConfiguration = (output, context) => {
    return take(output, {
        definition: (_) => de_FlowDefinition(_, context),
    });
};
const de_PromptConfiguration = (output, context) => {
    return take(output, {
        additionalModelRequestFields: (_) => de_Document(_, context),
        basePromptTemplate: __expectString,
        foundationModel: __expectString,
        inferenceConfiguration: (_) => de_InferenceConfiguration(_, context),
        parserMode: __expectString,
        promptCreationMode: __expectString,
        promptState: __expectString,
        promptType: __expectString,
    });
};
const de_PromptConfigurations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PromptConfiguration(entry, context);
    });
    return retVal;
};
const de_PromptFlowNodeConfiguration = (output, context) => {
    return take(output, {
        guardrailConfiguration: _json,
        sourceConfiguration: (_) => de_PromptFlowNodeSourceConfiguration(__expectUnion(_), context),
    });
};
const de_PromptFlowNodeInlineConfiguration = (output, context) => {
    return take(output, {
        additionalModelRequestFields: (_) => de_Document(_, context),
        inferenceConfiguration: (_) => de_PromptInferenceConfiguration(__expectUnion(_), context),
        modelId: __expectString,
        templateConfiguration: (_) => de_PromptTemplateConfiguration(__expectUnion(_), context),
        templateType: __expectString,
    });
};
const de_PromptFlowNodeSourceConfiguration = (output, context) => {
    if (output.inline != null) {
        return {
            inline: de_PromptFlowNodeInlineConfiguration(output.inline, context),
        };
    }
    if (output.resource != null) {
        return {
            resource: _json(output.resource),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_PromptInferenceConfiguration = (output, context) => {
    if (output.text != null) {
        return {
            text: de_PromptModelInferenceConfiguration(output.text, context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_PromptModelInferenceConfiguration = (output, context) => {
    return take(output, {
        maxTokens: __expectInt32,
        stopSequences: _json,
        temperature: __limitedParseFloat32,
        topP: __limitedParseFloat32,
    });
};
const de_PromptOverrideConfiguration = (output, context) => {
    return take(output, {
        overrideLambda: __expectString,
        promptConfigurations: (_) => de_PromptConfigurations(_, context),
    });
};
const de_PromptSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PromptSummary(entry, context);
    });
    return retVal;
};
const de_PromptSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        id: __expectString,
        name: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        version: __expectString,
    });
};
const de_PromptTemplateConfiguration = (output, context) => {
    if (output.chat != null) {
        return {
            chat: de_ChatPromptTemplateConfiguration(output.chat, context),
        };
    }
    if (output.text != null) {
        return {
            text: _json(output.text),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_PromptVariant = (output, context) => {
    return take(output, {
        additionalModelRequestFields: (_) => de_Document(_, context),
        genAiResource: (_) => _json(__expectUnion(_)),
        inferenceConfiguration: (_) => de_PromptInferenceConfiguration(__expectUnion(_), context),
        metadata: _json,
        modelId: __expectString,
        name: __expectString,
        templateConfiguration: (_) => de_PromptTemplateConfiguration(__expectUnion(_), context),
        templateType: __expectString,
    });
};
const de_PromptVariantList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PromptVariant(entry, context);
    });
    return retVal;
};
const de_Tool = (output, context) => {
    if (output.cachePoint != null) {
        return {
            cachePoint: _json(output.cachePoint),
        };
    }
    if (output.toolSpec != null) {
        return {
            toolSpec: de_ToolSpecification(output.toolSpec, context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_ToolConfiguration = (output, context) => {
    return take(output, {
        toolChoice: (_) => _json(__expectUnion(_)),
        tools: (_) => de_Tools(_, context),
    });
};
const de_ToolInputSchema = (output, context) => {
    if (output.json != null) {
        return {
            json: de_Document(output.json, context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_Tools = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Tool(__expectUnion(entry), context);
    });
    return retVal;
};
const de_ToolSpecification = (output, context) => {
    return take(output, {
        description: __expectString,
        inputSchema: (_) => de_ToolInputSchema(__expectUnion(_), context),
        name: __expectString,
    });
};
const de_VectorSearchBedrockRerankingConfiguration = (output, context) => {
    return take(output, {
        metadataConfiguration: _json,
        modelConfiguration: (_) => de_VectorSearchBedrockRerankingModelConfiguration(_, context),
        numberOfRerankedResults: __expectInt32,
    });
};
const de_VectorSearchBedrockRerankingModelConfiguration = (output, context) => {
    return take(output, {
        additionalModelRequestFields: (_) => de_AdditionalModelRequestFields(_, context),
        modelArn: __expectString,
    });
};
const de_VectorSearchRerankingConfiguration = (output, context) => {
    return take(output, {
        bedrockRerankingConfiguration: (_) => de_VectorSearchBedrockRerankingConfiguration(_, context),
        type: __expectString,
    });
};
const de_Document = (output, context) => {
    return output;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const _mR = "maxResults";
const _nT = "nextToken";
const _pI = "promptIdentifier";
const _pV = "promptVersion";
const _sRIUC = "skipResourceInUseCheck";
const _tK = "tagKeys";
